<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构与算法--列表</title>
      <link href="/2019/08/08/series-datastructures-list/"/>
      <url>/2019/08/08/series-datastructures-list/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>列表是一种常用的数据结构，如代办事项，十佳榜单等。当不需要在一个很长的序列中查找元素，或者对其排序时，列表显得尤其有用</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>使用 TypeScript 实现列表类，要实现的的列表类是</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> List &#123;</span><br><span class="line">  pos: <span class="built_in">number</span> <span class="comment">// 列表当前位置</span></span><br><span class="line">  listSize: <span class="built_in">number</span> <span class="comment">// 列表的元素个数</span></span><br><span class="line">  data: [] <span class="comment">// 列表的数据存储位置</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.pos = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.listSize = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.data = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> length() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.listSize</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清空列表中的所有元素</span></span><br><span class="line">  clear() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回列表的字符串形式</span></span><br><span class="line">  toString() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回当前位置的元素</span></span><br><span class="line">  getElement() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在现有元素后插入新元素</span></span><br><span class="line">  insert() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在列表的末尾添加新元素</span></span><br><span class="line">  append() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从列表中删除元素</span></span><br><span class="line">  remove() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将列表的当前位置移动到第一个元素</span></span><br><span class="line">  front() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将列表的当前位置移动到最后一个元素</span></span><br><span class="line">  end() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将当前位置向前移一位</span></span><br><span class="line">  prev() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将当前位置向后移一位</span></span><br><span class="line">  next() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否有后一个元素</span></span><br><span class="line">  hasNext() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否有前一个元素</span></span><br><span class="line">  hasPrev() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回列表的当前位置</span></span><br><span class="line">  currentPos() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将列表的当前位置移动到指定位置</span></span><br><span class="line">  moveTo() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将列表类实现后</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> List &#123;</span><br><span class="line">  pos: <span class="built_in">number</span> <span class="comment">// 列表当前位置</span></span><br><span class="line">  data: <span class="built_in">Array</span>&lt;<span class="built_in">any</span>&gt; <span class="comment">// 列表的数据存储</span></span><br><span class="line">  listSize: <span class="built_in">number</span> <span class="comment">// 列表的元素个数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.pos = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.listSize = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.data = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回列表的长度</span></span><br><span class="line">  <span class="keyword">get</span> length() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.listSize</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回列表的当前位置</span></span><br><span class="line">  <span class="keyword">get</span> currentPos() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.pos</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清空列表中的所有元素</span></span><br><span class="line">  clear() &#123;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.data</span><br><span class="line">    <span class="keyword">this</span>.data.length = <span class="keyword">this</span>.listSize = <span class="keyword">this</span>.pos = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回列表的字符串形式</span></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.toString()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回当前位置的元素</span></span><br><span class="line">  getElement() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data[<span class="keyword">this</span>.pos]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在现有元素后插入新元素</span></span><br><span class="line">  insert(element: <span class="built_in">any</span>, after: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> index = <span class="keyword">this</span>.findIndex(after)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.data.splice(index + <span class="number">1</span>, <span class="number">0</span>, element)</span><br><span class="line">      <span class="keyword">this</span>.listSize += <span class="number">1</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在列表的末尾添加新元素</span></span><br><span class="line">  append(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.data.push(element)</span><br><span class="line">    <span class="keyword">this</span>.listSize += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从列表中删除元素</span></span><br><span class="line">  remove(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> index = <span class="keyword">this</span>.findIndex(element)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.data.splice(index, <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">this</span>.listSize -= <span class="number">1</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断元素是否在列表中</span></span><br><span class="line">  contains(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.includes(element)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将列表的当前位置移动到第一个元素</span></span><br><span class="line">  front() &#123;</span><br><span class="line">    <span class="keyword">this</span>.pos = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将列表的当前位置移动到最后一个元素</span></span><br><span class="line">  end() &#123;</span><br><span class="line">    <span class="keyword">this</span>.pos = <span class="keyword">this</span>.listSize - <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将当前位置向前移一位</span></span><br><span class="line">  prev() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.pos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.pos -= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将当前位置向后移一位</span></span><br><span class="line">  next() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.pos &lt; <span class="keyword">this</span>.listSize) &#123;</span><br><span class="line">      <span class="keyword">this</span>.pos += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否有后一个元素</span></span><br><span class="line">  hasNext() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.pos &lt; <span class="keyword">this</span>.listSize</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否有前一个元素</span></span><br><span class="line">  hasPrev() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.pos &gt; <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将列表的当前位置移动到指定位置</span></span><br><span class="line">  moveTo(position: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (position &gt; <span class="number">0</span> &amp;&amp; position &lt; <span class="keyword">this</span>.listSize) &#123;</span><br><span class="line">      <span class="keyword">this</span>.pos = position</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查找元素位置</span></span><br><span class="line">  <span class="keyword">private</span> findIndex(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.findIndex(<span class="function"><span class="params">ele</span> =&gt;</span> element === ele)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = <span class="keyword">new</span> List()</span><br><span class="line"></span><br><span class="line">list.append(<span class="string">'aaa'</span>)</span><br><span class="line">list.append(<span class="string">'bbb'</span>)</span><br><span class="line">list.append(<span class="string">'ccc'</span>)</span><br><span class="line">list.append(<span class="string">'ddd'</span>)</span><br><span class="line">list.append(<span class="string">'eee'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'list :'</span>, list)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list : List &#123;</span><br><span class="line">  pos: <span class="number">0</span>,</span><br><span class="line">  listSize: <span class="number">5</span>,</span><br><span class="line">  data: [ <span class="string">'aaa'</span>, <span class="string">'bbb'</span>, <span class="string">'ccc'</span>, <span class="string">'ddd'</span>, <span class="string">'eee'</span> ] &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DataStructure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在服务器上搭建 Npm 私服</title>
      <link href="/2019/08/08/create-privite-npm-server/"/>
      <url>/2019/08/08/create-privite-npm-server/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>部门需要建一个 npm 私服，我查了一下发现有一个很好用的开源工具 <a href="https://github.com/verdaccio/verdaccio" target="_blank" rel="noopener">Verdaccio</a>，有 3 中方式可以在自己的服务器上搭建，以 Centos 为例</p><h2 id="使用-Node-js-环境"><a href="#使用-Node-js-环境" class="headerlink" title="使用 Node.js 环境"></a>使用 Node.js 环境</h2><p>首先需要在服务器上安装 node 环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https://rpm.nodesource.com/setup_10.x | sudo bash -</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nodejs</span><br></pre></td></tr></table></figure><p>安装后检查 node 是否正确安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>然后安装 Verdaccio</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g verdaccio</span><br></pre></td></tr></table></figure><p>安装完成就可以使用了， 如果使用的是 root 用户会提示你不要使用 root 账户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">verdaccio</span><br></pre></td></tr></table></figure><p>但是这样退出后服务就停止了，所以需要 pm2 进行启动</p><p>全局安装 pm2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure><p>使用 pm2 启动 Verdaccio</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start verdaccio</span><br></pre></td></tr></table></figure><h2 id="使用-Docker"><a href="#使用-Docker" class="headerlink" title="使用 Docker"></a>使用 Docker</h2><p>首先需要在服务器上安装 Docker，有了 Docker 之后就很简单了</p><p>拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull verdaccio/verdaccio</span><br></pre></td></tr></table></figure><p>运行容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --rm --name verdaccio -p 4873:4873 verdaccio/verdaccio</span><br></pre></td></tr></table></figure><h2 id="使用-Cloudron"><a href="#使用-Cloudron" class="headerlink" title="使用 Cloudron"></a>使用 Cloudron</h2><p>这种方式没试过，因为上面两种已经很方便了</p><p>链接 <a href="https://cloudron.io/button/org.eggertsson.verdaccio.html" target="_blank" rel="noopener">https://cloudron.io/button/org.eggertsson.verdaccio.html</a></p><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>私服安装完成后可以通过 ip 地址+端口号的形式访问了 xxx.xxx.xxx.xxx:4873</p><p>要用域名访问的话就需要将自己的域名解析到服务器上去</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://verdaccio.org/docs/en/installation" target="_blank" rel="noopener">https://verdaccio.org/docs/en/installation</a></p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter World 上线啦</title>
      <link href="/2019/08/03/flutter-world-release/"/>
      <url>/2019/08/03/flutter-world-release/</url>
      
        <content type="html"><![CDATA[<h3 id="Flutter-World-上线啦！"><a href="#Flutter-World-上线啦！" class="headerlink" title="Flutter World 上线啦！"></a>Flutter World 上线啦！</h3><p>一大波关于 Flutter 的学习资源集合，想要入坑的同学快去查看吧 👌</p><p><a href="https://flutterworld.site" target="_blank" rel="noopener">https://flutterworld.site</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Centos 中安装 Java8</title>
      <link href="/2019/08/01/centos-install-java8/"/>
      <url>/2019/08/01/centos-install-java8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于要在服务器上安装 <a href="https://jenkins.io/zh/" target="_blank" rel="noopener">Jenkins</a> 所以首先要安装 java。</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>安装之前最好更新下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure><h2 id="安装-Java8"><a href="#安装-Java8" class="headerlink" title="安装 Java8"></a>安装 Java8</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install java-1.8.0-openjdk</span><br></pre></td></tr></table></figure><h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><h2 id="设置环境变量-JAVA-HOME"><a href="#设置环境变量-JAVA-HOME" class="headerlink" title="设置环境变量 JAVA_HOME"></a>设置环境变量 JAVA_HOME</h2><p>首先找到安装 java 的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-alternatives --config java</span><br></pre></td></tr></table></figure><p>编辑 .bash_profile 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .bash_profile</span><br></pre></td></tr></table></figure><p>添加这一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.191.b12-1.el7_6.x86_64/jre/bin/java</span><br></pre></td></tr></table></figure><p>重新执行刚修改的 .bash_profile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .bash_profile</span><br></pre></td></tr></table></figure><h2 id="验证一下"><a href="#验证一下" class="headerlink" title="验证一下"></a>验证一下</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解 Flutter 应用和部件的生命周期</title>
      <link href="/2019/07/28/understand-flutter-lifecycle/"/>
      <url>/2019/07/28/understand-flutter-lifecycle/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Flutter 里面部件以及应用本身都有自己的生命周期，本文分别说明它们的生命周期</p><h2 id="部件"><a href="#部件" class="headerlink" title="部件"></a>部件</h2><p>在 Flutter 里面有两种部件 StatefulWidget 和 StatelessWidget，它们的生命周期分别是</p><h3 id="StatelessWidget"><a href="#StatelessWidget" class="headerlink" title="StatelessWidget"></a>StatelessWidget</h3><p>无状态部件的生命周期很简单，首先执行构造函数然后就执行 build 方法了</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">Constructor</span> <span class="title">Function</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">build</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h3 id="StatefulWidget"><a href="#StatefulWidget" class="headerlink" title="StatefulWidget"></a>StatefulWidget</h3><p>有状态部件的生命周期会复杂一些，因为是多了状态变化。首先是构造函数，然后会初始化 State 在执行 build 方法，如果执行了 setState 方法，就要检查部件是否更新，在执行 build，最后部件销毁的时候执行 dispose 方法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Constructor Function</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">initState</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">build</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setState</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">didUpdateWidget</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">build</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">dispose</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>Flutter 应用本身也有自己的生命周期，要观察到这些状态的变化需要让一个有状态部件混入 <code>WidgetsBindingObserver</code>，然后在 <code>initState</code> 方法中创建一个观察者，当然部件销毁的时候需要把创建的观察者实现清除</p><ul><li><p>inactive 应用处于非活动状态，并且未接收用户输入</p></li><li><p>paused 应用当前对用户不可见，不响应用户输入，并在后台运行</p></li><li><p>resumed 应用可见并响应用户输入</p></li><li><p>suspending 应用退出了</p></li></ul><p>代码</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">MaterialApp</span>(</span><br><span class="line">      title: <span class="symbol">'Flutter</span> <span class="type">Lifecycle</span>',</span><br><span class="line">      home: <span class="type">MyHomePage</span>(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyHomePageState createState() =&gt; _MyHomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyHomePageState</span> <span class="keyword">extends</span> <span class="title">State&lt;MyHomePage&gt;</span> <span class="keyword">with</span> <span class="title">WidgetsBindingObserver</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  void initState() &#123;</span><br><span class="line">    <span class="type">WidgetsBinding</span>.instance.addObserver(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  void didChangeAppLifecycleState(<span class="type">AppLifecycleState</span> state) &#123;</span><br><span class="line">print(state);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  void dispose() &#123;</span><br><span class="line">    <span class="type">WidgetsBinding</span>.instance.removeObserver(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Scaffold</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在 Flutter 应用里面这些生命周期还是挺简单易懂的</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对于 Workbox Strategies几种策略的解释</title>
      <link href="/2019/07/26/about-workbox-strategies/"/>
      <url>/2019/07/26/about-workbox-strategies/</url>
      
        <content type="html"><![CDATA[<p>要将自己的网站支持 PWA，需要注册一个 serviceWorker 到浏览器中，通常使用 Google 的 <a href="https://developers.google.com/web/tools/workbox/" target="_blank" rel="noopener">Workbox</a> 工具，Workbox 可以在浏览器请求资源的时候提供了几种不同的策略对请求响应，本文对几种策略进行说明。</p><h2 id="StaleWhileRevalidate"><a href="#StaleWhileRevalidate" class="headerlink" title="StaleWhileRevalidate"></a>StaleWhileRevalidate</h2><p>StaleWhileRevalidate 模式允许您使用缓存的响应尽快响应请求，如果未缓存，则返回到网络请求，然后，用网络请求更新缓存。</p><p><img src="https://developers.google.com/web/tools/workbox/images/modules/workbox-strategies/stale-while-revalidate.png" alt="StaleWhileRevalidate"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">workbox.routing.registerRoute(</span><br><span class="line">  /\.(?:js|css)$/,</span><br><span class="line">  <span class="keyword">new</span> workbox.strategies.StaleWhileRevalidate(&#123;</span><br><span class="line">    cacheName: <span class="string">'static'</span></span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="CacheFirst"><a href="#CacheFirst" class="headerlink" title="CacheFirst"></a>CacheFirst</h2><p>如果缓存中存在响应，则将使用缓存的响应来完成请求，并且根本不会使用网络。 如果没有缓存的响应，则将通过网络请求来满足请求，并且将缓存响应，以便直接从缓存提供下一个请求。</p><p><img src="https://developers.google.com/web/tools/workbox/images/modules/workbox-strategies/cache-first.png" alt="CacheFirst"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">workbox.routing.registerRoute(</span><br><span class="line">  /\.(?:js|css)$/,</span><br><span class="line">  <span class="keyword">new</span> workbox.strategies.CacheFirst(&#123;</span><br><span class="line">    cacheName: <span class="string">'static'</span></span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="NetworkFirst"><a href="#NetworkFirst" class="headerlink" title="NetworkFirst"></a>NetworkFirst</h2><p>对于频繁更新的请求，网络优先策略是理想的解决方案。 默认情况下，它将尝试从网络获取最新响应，如果请求成功，它会将响应放入缓存中。 如果网络无法返回响应，则将使用缓存的响应。</p><p><img src="https://developers.google.com/web/tools/workbox/images/modules/workbox-strategies/network-first.png" alt="NetworkFirst"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">workbox.routing.registerRoute(</span><br><span class="line">  /\.(?:js|css)$/,</span><br><span class="line">  <span class="keyword">new</span> workbox.strategies.NetworkFirst(&#123;</span><br><span class="line">    cacheName: <span class="string">'static'</span></span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="NetworkOnly"><a href="#NetworkOnly" class="headerlink" title="NetworkOnly"></a>NetworkOnly</h2><p>仅使用网络响应请求。</p><p><img src="https://developers.google.com/web/tools/workbox/images/modules/workbox-strategies/network-only.png" alt="NetworkOnly"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">workbox.routing.registerRoute(</span><br><span class="line">  /\.(?:js|css)$/,</span><br><span class="line">  <span class="keyword">new</span> workbox.strategies.NetworkOnly(&#123;</span><br><span class="line">    cacheName: <span class="string">'static'</span></span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="CacheOnly"><a href="#CacheOnly" class="headerlink" title="CacheOnly"></a>CacheOnly</h2><p>仅使用缓存响应请求。不常见，但如果您有自己的预先缓存步骤，则可能很有用。</p><p><img src="https://developers.google.com/web/tools/workbox/images/modules/workbox-strategies/cache-only.png" alt="CacheOnly"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">workbox.routing.registerRoute(</span><br><span class="line">  /\.(?:js|css)$/,</span><br><span class="line">  <span class="keyword">new</span> workbox.strategies.CacheOnly(&#123;</span><br><span class="line">    cacheName: <span class="string">'static'</span></span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developers.google.com/web/tools/workbox/modules/workbox-strategies" target="_blank" rel="noopener">官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Workbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Travis CI 部署 Hugo 博客到 Github Pages</title>
      <link href="/2019/07/26/hugo-travis-github-page/"/>
      <url>/2019/07/26/hugo-travis-github-page/</url>
      
        <content type="html"><![CDATA[<p>原本使用的是 Netlify 去部署博客的，域名解析也是通过 Netlify 的 DNS 服务器，但是发现博客在别人的电脑上打不开…发现是域名解析的问题，所以就把博客放到 Github Pages 上了，但是这样就失去了 Netlify 提供的自动构建和部署的能力，需要自己去配置 Travis CI 实现自动部署了。</p><h2 id="预先要求"><a href="#预先要求" class="headerlink" title="预先要求"></a>预先要求</h2><ul><li>本地安装了 <a href="https://gohugo.io" target="_blank" rel="noopener">Hugo</a></li><li>一个 <a href="https://github.com/" target="_blank" rel="noopener">Github</a> 账号</li><li>使用 Github 账号登录 <a href="https://travis-ci.org" target="_blank" rel="noopener">Travis</a></li></ul><h2 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h2><p>使用 Hugo 命令行工具新建自己的博客，将代码推送到自己的 Github 仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hugo new site my-blog</span><br><span class="line">...</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h2 id="新建一个-Github-Personal-access-token"><a href="#新建一个-Github-Personal-access-token" class="headerlink" title="新建一个 Github Personal access token"></a>新建一个 Github Personal access token</h2><p>在 <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">https://github.com/settings/tokens</a> 新建一个 Personal access token 用来发布博客到 Github Pages 时进行验证，复制生成的 token，不要刷新或离开当前页面，否则 token 就看不见了，只能重新生成</p><p><img src="/images/github-token.jpg" alt="token"></p><p>登录到 <a href="https://travis-ci.org" target="_blank" rel="noopener">Travis CI</a> 对项目进行关联 <a href="https://travis-ci.org/account/repositories" target="_blank" rel="noopener">https://travis-ci.org/account/repositories</a></p><p>完成后进入设置界面 <code>https://travis-ci.org/your-gihub-user-name/your-gihub-repo/settings</code></p><p>在 Environment Variables 填写 GITHUB_TOKEN 变量，点击 Add 按钮，这样你的环境变量就添加完成了</p><h2 id="配置-travis-yml"><a href="#配置-travis-yml" class="headerlink" title="配置 .travis.yml"></a>配置 .travis.yml</h2><p>因为 Hugo 是用 GO 语言写的，所以要配置 GO 编译环境，在 before_script 里删除了 public 文件夹，如果有自定义域名，将自定义域名输出到构建出来的 CNAME 文件里面去，记得添加 DNS 解析记录到 Gihub 去 <a href="https://help.github.com/cn/articles/using-a-custom-domain-with-github-pages" target="_blank" rel="noopener">参考</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">language: go</span><br><span class="line"></span><br><span class="line">dist: trusty</span><br><span class="line"></span><br><span class="line">sudo: false</span><br><span class="line"></span><br><span class="line">env:</span><br><span class="line">  - HUGO_VERSION=0.56.0</span><br><span class="line"></span><br><span class="line">install: true</span><br><span class="line"></span><br><span class="line">before_script:</span><br><span class="line">  - wget https://github.com/gohugoio/hugo/releases/download/v$&#123;HUGO_VERSION&#125;/hugo_$&#123;HUGO_VERSION&#125;_Linux-64bit.deb</span><br><span class="line">  - sudo dpkg -i hugo_$&#123;HUGO_VERSION&#125;_Linux-64bit.deb</span><br><span class="line">  - rm -rf public || exit 0</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">  - hugo -v --gc --minify</span><br><span class="line">  - echo 'your-custom-domain.com' &gt; public/CNAME</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  provider: pages</span><br><span class="line">  local-dir: public</span><br><span class="line">  skip-cleanup: true</span><br><span class="line">  github-token: $GITHUB_TOKEN</span><br><span class="line">  keep-history: true</span><br><span class="line">  on:</span><br><span class="line">    branch: master</span><br><span class="line"></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">  - master</span><br></pre></td></tr></table></figure><h2 id="提交触发构建"><a href="#提交触发构建" class="headerlink" title="提交触发构建"></a>提交触发构建</h2><p>最后新建一篇文章，push 到 Github 仓库，触发 Travis 构建就可以了，以后博客进行更新后就可以自动构建发布了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo new posts/my-first-post.md</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hugo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对于 PWA 应用的 manifest.json 文件的解释</title>
      <link href="/2019/07/24/about-manifest/"/>
      <url>/2019/07/24/about-manifest/</url>
      
        <content type="html"><![CDATA[<p>网站要支持 PWA，需要一个 <code>manifest.json</code> 文件，W3C Web App Manifest 的草案上定义了以下的字段，解释一下每个字段是什么意思。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">dictionary WebAppManifest &#123;</span><br><span class="line">   TextDirectionType dir = <span class="string">"auto"</span>;</span><br><span class="line">   DOMString lang;</span><br><span class="line">   USVString name;</span><br><span class="line">   USVString short_name;</span><br><span class="line">   USVString description;</span><br><span class="line">   sequence&lt;ImageResource&gt; icons;</span><br><span class="line">   sequence&lt;ImageResource&gt; screenshots;</span><br><span class="line">   sequence&lt;USVString&gt; categories;</span><br><span class="line">   DOMString iarc_rating_id;</span><br><span class="line">   USVString start_url;</span><br><span class="line">   DisplayModeType display = <span class="string">"browser"</span>;</span><br><span class="line">   OrientationLockType orientation;</span><br><span class="line">   USVString theme_color;</span><br><span class="line">   USVString background_color;</span><br><span class="line">   USVString scope;</span><br><span class="line">   ServiceWorkerRegistrationObject serviceworker;</span><br><span class="line">   sequence&lt;ExternalApplicationResource&gt; related_applications;</span><br><span class="line">   boolean prefer_related_applications = <span class="string">"false"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">dictionary ImageResource &#123;</span><br><span class="line">  required USVString src;</span><br><span class="line">  DOMString sizes;</span><br><span class="line">  USVString type;</span><br><span class="line">  USVString purpose;</span><br><span class="line">  USVString platform;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">dictionary ServiceWorkerRegistrationObject &#123;</span><br><span class="line">  required USVString src;</span><br><span class="line">  USVString scope;</span><br><span class="line">  WorkerType type = <span class="string">"classic"</span>;</span><br><span class="line">  ServiceWorkerUpdateViaCache update_via_cache = <span class="string">"imports"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">dictionary ExternalApplicationResource &#123;</span><br><span class="line">  required USVString platform;</span><br><span class="line">  USVString url;</span><br><span class="line">  DOMString id;</span><br><span class="line">  USVString min_version;</span><br><span class="line">  sequence&lt;Fingerprint&gt; fingerprints;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>dir</strong> 指定了 manifest 中具有方向性的成员的基本方向，可以设置 <code>ltr</code> 左至右, <code>rtl</code> 右至左, <code>auto</code> 没有明确方向。</p><p><strong>lang</strong> 指定 manifest 中具有方向性成员的值的主要语言（因为知道语言也可以帮助方向性）。</p><p><strong>name</strong> 表示应用的名称。</p><p><strong>short_name</strong> 表示 Web 应用程序名称的简短版本，用于没有足够空间来显示 Web 应用程序的全名的地方。</p><p><strong>description</strong> 描述 Web 应用程序的目的。</p><p><strong>scope</strong> 表示 Web 应用程序导航范围。</p><p><strong>icons</strong> icons 是 ImageResources 的数组，可以在各种情况下充当 Web 应用程序的图标表示。例如，它们可用于在其他应用程序列表中表示 Web 应用程序，或者将 Web 应用程序与 OS 的任务切换器和/或系统首选项集成。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"icons"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"icon/lowres.webp"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"48x48"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/webp"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"icon/lowres"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"48x48"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"icon/hd_hi.ico"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"72x72 96x96 128x128 256x256"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"icon/hd_hi.svg"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"257x257"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>display</strong> 其值是 DisplayModeType 值之一，表示开发人员对 Web 应用程序的首选显示模式。可以设置</p><ul><li>“fullscreen” 占用整个可用的显示区域；</li><li>“standalone” 使其外观和感觉就像一个独立的本机应用程序；</li><li>“minimal-ui” 类似于 standalone 模式，但为最终用户提供了一些方法来访问用于控制导航的最小 UI 元素集（即，后退，前进，重新加载以及可能以某种方式查看文档的地址）；</li><li>“browser” 使用特定于平台的约定打开 Web 应用程序，以在用户代理中打开超链接（例如，在浏览器选项卡或新窗口中）；</li></ul><p><strong>orientation</strong> Web 应用程序的所有顶级浏览上下文的默认方向。</p><p><strong>start_url</strong> 表示起始 URL 的字符串，该 URL 是用户启动 Web 应用程序时开发人员更喜欢用户代理加载的 URL（例如，当用户从设备的应用程序菜单中单击 Web 应用程序的图标时或主屏幕）。</p><p><strong>serviceworker</strong> 表示应用中 serviceWorker 的信息。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"serviceworker": &#123;</span><br><span class="line">  "src": "sw.js",</span><br><span class="line">  "scope": "/foo",</span><br><span class="line">  "update_via_cache": "none"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>theme_color</strong> 应用程序上下文的默认主题颜色。</p><p><strong>related_applications</strong> 是底层应用程序平台可访问的应用程序。</p><p><strong>prefer_related_applications</strong> 表示相关应用程序是否应优先于当前的 Web 应用程序。</p><p><strong>background_color</strong> Web 应用程序的预期背景颜色。</p><p><strong>categories</strong> Web 应用程序所属的预期应用程序类别。</p><p><strong>screenshots</strong> 一个 ImageResources 数组，表示常见使用场景中的 Web 应用程序的截图。</p><p><strong>iarc_rating_id</strong> 用于确定 Web 应用程序适合的年龄。</p><p>一个完整的示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"lang"</span>: <span class="string">"en"</span>,</span><br><span class="line">  <span class="attr">"dir"</span>: <span class="string">"ltr"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Super Racer 3000"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"The ultimate futuristic racing game from the future!"</span>,</span><br><span class="line">  <span class="attr">"short_name"</span>: <span class="string">"Racer3K"</span>,</span><br><span class="line">  <span class="attr">"icons"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"icon/lowres.webp"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"64x64"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/webp"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"icon/lowres.png"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"64x64"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"icon/hd_hi"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"128x128"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"scope"</span>: <span class="string">"/racer/"</span>,</span><br><span class="line">  <span class="attr">"start_url"</span>: <span class="string">"/racer/start.html"</span>,</span><br><span class="line">  <span class="attr">"display"</span>: <span class="string">"fullscreen"</span>,</span><br><span class="line">  <span class="attr">"orientation"</span>: <span class="string">"landscape"</span>,</span><br><span class="line">  <span class="attr">"theme_color"</span>: <span class="string">"aliceblue"</span>,</span><br><span class="line">  <span class="attr">"background_color"</span>: <span class="string">"red"</span>,</span><br><span class="line">  <span class="attr">"serviceworker"</span>: &#123;</span><br><span class="line">    <span class="attr">"src"</span>: <span class="string">"sw.js"</span>,</span><br><span class="line">    <span class="attr">"scope"</span>: <span class="string">"/racer/"</span>,</span><br><span class="line">    <span class="attr">"update_via_cache"</span>: <span class="string">"none"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"screenshots"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"screenshots/in-game-1x.jpg"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"640x480"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/jpeg"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"screenshots/in-game-2x.jpg"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"1280x920"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/jpeg"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要在页面是使用的话直接用 <link> 标签引用即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"manifest"</span> <span class="attr">href</span>=<span class="string">"/manifest.json"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这样浏览器就可以安装你的 Web 应用了。</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>让 Hugo 博客支持 PWA</title>
      <link href="/2019/07/23/add-pwa-support-to-hugo/"/>
      <url>/2019/07/23/add-pwa-support-to-hugo/</url>
      
        <content type="html"><![CDATA[<p>让用 Hugo 搭建的博客支持 PWA 很简单，只需 2 个步骤即可：</p><h2 id="1-添加一个-manifest-json-文件"><a href="#1-添加一个-manifest-json-文件" class="headerlink" title="1. 添加一个 manifest.json 文件"></a>1. 添加一个 manifest.json 文件</h2><p>使用 <a href="https://app-manifest.firebaseapp.com" target="_blank" rel="noopener">https://app-manifest.firebaseapp.com</a> 来生成博客的 manifest.json 文件，然后将生成出来的文件和图片放到博客的 static 目录，然后在 layout/index.html 的 <head><meta name="generator" content="Hexo 3.9.0"> 标签内引用这个文件</head></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"manifest"</span> <span class="attr">href</span>=<span class="string">"/manifest.json"</span> /&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样你的博客就可以安装到桌面了</p><h2 id="2-使用-Workbox-工具注册-ServiceWorker"><a href="#2-使用-Workbox-工具注册-ServiceWorker" class="headerlink" title="2. 使用 Workbox 工具注册 ServiceWorker"></a>2. 使用 Workbox 工具注册 ServiceWorker</h2><p>在 static 新建一个 <code>sw.js</code> 文件，在文件添加以下内容用来为网络请求添加缓存；主要是缓存静态资源 js，css，图片以及字体等文件，<br>详细文档可以查看 <a href="https://developers.google.cn/web/tools/workbox" target="_blank" rel="noopener">Workbox 文档</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">importScripts(<span class="string">'https://cdn.jsdelivr.net/npm/workbox-cdn/workbox/workbox-sw.js'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (workbox) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Yay! Workbox is loaded 🎉`</span>)</span><br><span class="line"></span><br><span class="line">  workbox.routing.registerRoute(</span><br><span class="line">    /\.(?:js|css)$/,</span><br><span class="line">    <span class="keyword">new</span> workbox.strategies.StaleWhileRevalidate(&#123;</span><br><span class="line">      cacheName: <span class="string">'static-resources'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  workbox.routing.registerRoute(</span><br><span class="line">    /\.(?:png|jpg|jpeg|svg|gif)$/,</span><br><span class="line">    <span class="keyword">new</span> workbox.strategies.CacheFirst(&#123;</span><br><span class="line">      cacheName: <span class="string">'image-cache'</span>,</span><br><span class="line">      plugins: [</span><br><span class="line">        <span class="keyword">new</span> workbox.expiration.Plugin(&#123;</span><br><span class="line">          maxEntries: <span class="number">20</span>,</span><br><span class="line">          maxAgeSeconds: <span class="number">7</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span></span><br><span class="line">        &#125;)</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  workbox.routing.registerRoute(</span><br><span class="line">    /^https:\/\/fonts\.googleapis\.com/,</span><br><span class="line">    <span class="keyword">new</span> workbox.strategies.StaleWhileRevalidate(&#123;</span><br><span class="line">      cacheName: <span class="string">'google-fonts-stylesheets'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  workbox.routing.registerRoute(</span><br><span class="line">    /^https:\/\/fonts\.gstatic\.com/,</span><br><span class="line">    <span class="keyword">new</span> workbox.strategies.CacheFirst(&#123;</span><br><span class="line">      cacheName: <span class="string">'google-fonts-webfonts'</span>,</span><br><span class="line">      plugins: [</span><br><span class="line">        <span class="keyword">new</span> workbox.cacheableResponse.Plugin(&#123;</span><br><span class="line">          statuses: [<span class="number">0</span>, <span class="number">200</span>]</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> workbox.expiration.Plugin(&#123;</span><br><span class="line">          maxAgeSeconds: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">365</span>,</span><br><span class="line">          maxEntries: <span class="number">30</span></span><br><span class="line">        &#125;)</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Boo! Workbox didn't load 😬`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本完成了，可以用 Chrome 的 Audits 的工具跑了一下分，看看还有什么地方要修改的。</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解 &lt;Link&gt; 标签上 Rel=prexxx 的作用</title>
      <link href="/2019/07/22/understand-link-prexxx/"/>
      <url>/2019/07/22/understand-link-prexxx/</url>
      
        <content type="html"><![CDATA[<p>在 HTML 中 <link> 标签指定了当前文档与外部资源之间的关系<br>本文说明 <link> 标签的 rel 属性分别设置 dns-prefetch，preconnect，prefetch，preload，prerender 的时候有说明作用</p><p>dns-prefetch：向浏览器提示需要资源，允许浏览器在用户单击链接之前进行 DNS 查找和协议握手</p><p>preconnect：向浏览器提供提示，建议它提前打开与链接网站的连接，而不泄露任何私人信息或下载任何内容，以便在遵循链接时可以更快地获取链接的内容</p><p>prefetch：建议浏览器提前获取链接资源，因为它可能是用户请求的。 从 Firefox 44 开始，将考虑 crossorigin 属性的值，从而可以进行匿名预取</p><p>preload：告诉浏览器下载资源，因为稍后在当前导航期间将需要此资源</p><p>prerender：建议浏览器提前获取链接资源，并且它还在屏幕外渲染预取内容，以便在需要时可以快速呈现给用户</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://devdocs.io/html/link_types" target="_blank" rel="noopener">link_types</a></p><p><a href="https://stackoverflow.com/questions/47273743/preconnect-vs-dns-prefetch-resource-hints" target="_blank" rel="noopener">preconnect-vs-dns-prefetch-resource-hints</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器请求耗时阶段解释</title>
      <link href="/2019/07/18/request-timimg/"/>
      <url>/2019/07/18/request-timimg/</url>
      
        <content type="html"><![CDATA[<h2 id="一个请求耗时阶段解释"><a href="#一个请求耗时阶段解释" class="headerlink" title="一个请求耗时阶段解释"></a>一个请求耗时阶段解释</h2><p><strong>Queueing</strong> 浏览器会在以下情况时将请求加入队列，有优先级更高的请求；当请求协议是 HTTP/1.0 和 HTTP/1.1 时，同一域名下已经有 6 个 TCP 链接；浏览器在分配磁盘缓存</p><p><strong>Stalled</strong> 由于排队中描述的任何原因，请求可能会停止</p><p><strong>DNS Lookup</strong> 浏览器正在解析请求的 IP 地址</p><p><strong>Proxy negotiation</strong> 浏览器与代理服务器协商请求</p><p><strong>Request sent</strong> 请求已经发出</p><p><strong>ServiceWorker Preparation</strong> 浏览器启动 service worker</p><p><strong>Request to ServiceWorker</strong> 请求已经向 service worker 发出</p><p><strong>Waiting (TTFB)</strong> 浏览器等待第一个字节返回，此时间包括 1 次往返延迟和服务器准备响应所用的时间。</p><p><strong>Content Download</strong>. 浏览器接收响应</p><p><strong>Receiving Push</strong>. 浏览器收到通过 HTTP/2 Server Push 的响应</p><p><strong>Reading Push</strong>. 浏览器正在读取先前收到的本地数据</p><h2 id="Timing-breakdown-phases-explained"><a href="#Timing-breakdown-phases-explained" class="headerlink" title="Timing breakdown phases explained"></a>Timing breakdown phases explained</h2><p>Here’s more information about each of the phases you may see in the Timing tab:</p><p><strong>Queueing</strong>. The browser queues requests when:</p><ul><li>There are higher priority requests.</li><li>There are already six TCP connections open for this origin, which is the limit. Applies to HTTP/1.0 and HTTP/1.1 only.</li><li>The browser is briefly allocating space in the disk cache</li></ul><p><strong>Stalled</strong>. The request could be stalled for any of the reasons described in<strong>Queueing</strong>.</p><p><strong>DNS Lookup</strong>. The browser is resolving the request’s IP address.</p><p><strong>Proxy negotiation</strong>. The browser is negotiating the request with a<a href="https://en.wikipedia.org/wiki/Proxy_server" target="_blank" rel="noopener">proxy server</a>.</p><p><strong>Request sent</strong>. The request is being sent.</p><p><strong>ServiceWorker Preparation</strong>. The browser is starting up the service worker.</p><p><strong>Request to ServiceWorker</strong>. The request is being sent to the service worker.</p><p><strong>Waiting (TTFB)</strong>. The browser is waiting for the first byte of a response. TTFB stands for Time To First Byte. This timing includes 1 round trip of latency and the time the server took to prepare the response.</p><p><strong>Content Download</strong>. The browser is receiving the response.</p><p><strong>Receiving Push</strong>. The browser is receiving data for this response via HTTP/2 Server Push.</p><p><strong>Reading Push</strong>. The browser is reading the local data previously received.</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Browser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dart 语言中的 Final 与 Const 的区别</title>
      <link href="/2019/07/16/dart-final-vs-const/"/>
      <url>/2019/07/16/dart-final-vs-const/</url>
      
        <content type="html"><![CDATA[<p>在 Dart 中有 <code>final</code> 和 <code>const</code> 两个关键字，貌似都是表示常量的，但是它们还是有区别的</p><p>final 变量的值只能被设置一次； const 变量在编译时就已经固定 (const 变量是隐式 final 的类型.) 最高级 final 变量或类变量在第一次使用时被初始化。</p><p><a href="https://dart.dev/guides/language/language-tour#final-and-const" target="_blank" rel="noopener">官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Dart </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 Apple 的 Code Signing</title>
      <link href="/2019/07/15/code-signing/"/>
      <url>/2019/07/15/code-signing/</url>
      
        <content type="html"><![CDATA[<p>想要把 Flutter 写的应用运行在 iPhone 上，必须要进行 Code Signing</p><p><a href="https://developer.apple.com/support/code-signing/" target="_blank" rel="noopener">官方文档</a></p><h2 id="Code-Signing"><a href="#Code-Signing" class="headerlink" title="Code Signing"></a>Code Signing</h2><p>Code signing your app assures users that it is from a known source and the app hasn’t been modified since it was last signed. Before your app can integrate app services, be installed on a device, or be submitted to the App Store, it must be signed with a<a href="https://developer.apple.com/support/certificates/" target="_blank" rel="noopener">certificate</a>issued by Apple. For more information on how to request certificates and code sign your apps, review<a href="https://help.apple.com/xcode/mac/current/" target="_blank" rel="noopener">Xcode Help</a>.</p><h2 id="代码签名"><a href="#代码签名" class="headerlink" title="代码签名"></a>代码签名</h2><p>代码签名您的应用程序会向用户保证它来自已知来源，并且该应用程序自上次签名后未被修改。 在您的应用程序可以集成应用程序服务，安装在设备上或提交到 App Store 之前，必须使用 Apple 颁发的证书进行签名。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
