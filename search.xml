<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用 Provider 管理 Flutter 应用状态</title>
      <link href="/post/2019/09/11/flutter-provider-todos/"/>
      <url>/post/2019/09/11/flutter-provider-todos/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一个应用内通常会有两种数据，单个组件内部的使用的数据，很多组件共同使用的数据</p><h2 id="什么是-Provider"><a href="#什么是-Provider" class="headerlink" title="什么是 Provider"></a>什么是 Provider</h2><p>官方的定义是： A mixture between dependency injection (DI) and state management, built with widgets for widgets.</p><h2 id="为什么要使用-Provider"><a href="#为什么要使用-Provider" class="headerlink" title="为什么要使用 Provider"></a>为什么要使用 Provider</h2><h2 id="如何使用-Provider"><a href="#如何使用-Provider" class="headerlink" title="如何使用 Provider"></a>如何使用 Provider</h2><p>首先在项目的 pubspec.yml 的 dependecies 中定义要使用的 provider 版本</p><p>创建一个 store 文件夹</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line"><span class="attr">  provider:</span> <span class="string">^3.1.0</span></span><br><span class="line">  <span class="string">...</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>未完待续…</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法之哈希表</title>
      <link href="/post/2019/09/08/dsa-hash/"/>
      <url>/post/2019/09/08/dsa-hash/</url>
      
        <content type="html"><![CDATA[<p>哈希表是一种常用的数据结构，可以快速的插入和取用，但是查询数据效率低下</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>哈希表是一种常用的数据结构，可以快速的插入和取用，但是查询数据效率低下。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>基于数组实现哈希表，数组的长度是预先设定的，有需要是增加。最常见的是将数组的长度设为一个质数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> HashTable &#123;</span><br><span class="line">  table = &lt;<span class="built_in">any</span>&gt;[]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.table = <span class="built_in">Array</span>.from(&#123;</span><br><span class="line">      length: <span class="number">137</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将字符串的 ASCLL 码相加对数组长度求余</span></span><br><span class="line">  hash(data: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; data.length; index++) &#123;</span><br><span class="line">      total += data.charCodeAt(index)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total % <span class="keyword">this</span>.table.length</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更优的 hash 方法</span></span><br><span class="line">  betterHash(data: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> H = <span class="number">37</span></span><br><span class="line">    <span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; data.length; index++) &#123;</span><br><span class="line">      total += H * total + data.charCodeAt(index)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    total = total % <span class="keyword">this</span>.table.length</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (total &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      total += <span class="keyword">this</span>.table.length - <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(total.toString())</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 存储数据</span></span><br><span class="line">  put(key: <span class="built_in">string</span>, data: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> pos = <span class="keyword">this</span>.betterHash(key)</span><br><span class="line">    <span class="keyword">this</span>.table[pos] = data</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取数据</span></span><br><span class="line">  <span class="keyword">get</span>(key: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.table[<span class="keyword">this</span>.betterHash(key)]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 显示数据</span></span><br><span class="line">  show() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="keyword">this</span>.table.length; index++) &#123;</span><br><span class="line">      <span class="keyword">const</span> item = <span class="keyword">this</span>.table[index]</span><br><span class="line">      <span class="keyword">if</span> (item) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;index&#125;</span>: <span class="subst">$&#123;item&#125;</span>`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hashTable = <span class="keyword">new</span> HashTable()</span><br><span class="line"></span><br><span class="line">hashTable.put(<span class="string">'David'</span>, <span class="string">'David'</span>)</span><br><span class="line">hashTable.put(<span class="string">'Jennifer'</span>, <span class="string">'Jennifer'</span>)</span><br><span class="line">hashTable.put(<span class="string">'Donnie'</span>, <span class="string">'Donnie'</span>)</span><br><span class="line">hashTable.put(<span class="string">'Raymond'</span>, <span class="string">'Raymond'</span>)</span><br><span class="line">hashTable.put(<span class="string">'Cynthia'</span>, <span class="string">'Cynthia'</span>)</span><br><span class="line">hashTable.put(<span class="string">'Mike'</span>, <span class="string">'Mike'</span>)</span><br><span class="line">hashTable.put(<span class="string">'Clayton'</span>, <span class="string">'Clayton'</span>)</span><br><span class="line">hashTable.put(<span class="string">'Danny'</span>, <span class="string">'Danny'</span>)</span><br><span class="line">hashTable.put(<span class="string">'Jonathan'</span>, <span class="string">'Jonathan'</span>)</span><br><span class="line"></span><br><span class="line">hashTable.show()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Jonathan: '</span>, hashTable.get(<span class="string">'Jonathan'</span>))</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span>: Jennifer</span><br><span class="line"><span class="number">22</span>: Raymond</span><br><span class="line"><span class="number">55</span>: Donnie</span><br><span class="line"><span class="number">58</span>: Clayton</span><br><span class="line"><span class="number">80</span>: Jonathan</span><br><span class="line"><span class="number">82</span>: Mike</span><br><span class="line"><span class="number">103</span>: Cynthia</span><br><span class="line"><span class="number">110</span>: Danny</span><br><span class="line">Jonathan:  Jonathan</span><br></pre></td></tr></table></figure><h2 id="碰撞处理"><a href="#碰撞处理" class="headerlink" title="碰撞处理"></a>碰撞处理</h2><p>当哈希方法对于多个输入产生了相同的输出是就会出现碰撞，两种可以解决键的碰撞问题开链法以及线性探测法</p><p>开链法</p><p>开链法指的是在实现 hash 表的底层数组中，每个数组又是一个新的数据结构，比如另一个数组，这样即使有两个键 hash 后的值相同，依然被保存在同样的位置，但是他们在第二个数组中的位置是不同的。</p><p>要实现开链法，在创建存储键值的数组时，通过一个函数创建一个新的数组，然后将该数组赋值给 hash 表里的每一个元素，创建一个二维数组。</p><p>线性探测法</p><p>线性探测法指的是当发生碰撞时检查 hash 表里的下一个位置是否为空，如果为空就将数据存入该位置，如果不为空，则继续查找下一个位置，直到找到空位子为止。通常来说如果数组的大小是待存储数据个数的 1.5 倍时，那么用开链法；如果数组的大小是待存储的数据两倍以上时，那么使用线性探测法。</p>]]></content>
      
      
      <categories>
          
          <category> DSA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Egg.js 中使用 Redis 缓存提升性能</title>
      <link href="/post/2019/08/31/egg-redis-cache/"/>
      <url>/post/2019/08/31/egg-redis-cache/</url>
      
        <content type="html"><![CDATA[<p>Redis 是一款开源的，基于 BSD 许可的，高级键值缓存和存储系统。Redis 的键包括 string，hash，list，set，sorted set，bitmap 和 hyperloglog。你可以在这些类型上面运行原子操作，例如，追加字符串，增加哈希中的值，加入一个元素到列表，计算集合的交集、并集和差集，或者是从有序集合中获取最高排名的元素。</p><p>要在 Egg.js 中使用 redis，只需要安装 redis 即可</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Redis 是一款开源的，基于 BSD 许可的，高级键值缓存和存储系统。Redis 的键包括 string，hash，list，set，sorted set，bitmap 和 hyperloglog。你可以在这些类型上面运行原子操作，例如，追加字符串，增加哈希中的值，加入一个元素到列表，计算集合的交集、并集和差集，或者是从有序集合中获取最高排名的元素。</p><p>要在 Egg.js 中使用 redis，只需要安装 npm i redis 即可。</p><p>通过一个例子来验证一下，创建一个可以返回开源仓库在 Github 上的 star 数量的数据接口，来测试使用 Redis 后带来的提升，代码地址: <a href="https://github.com/xrr2016/egg-redis-test" target="_blank" rel="noopener">https://github.com/xrr2016/egg-redis-test</a></p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>首先使用 Egg.js 创建一个项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir egg-redis-test &amp;&amp; <span class="built_in">cd</span> egg-redis-test</span><br><span class="line"></span><br><span class="line">npm init egg --<span class="built_in">type</span>=simple</span><br><span class="line"></span><br><span class="line">npm i</span><br></pre></td></tr></table></figure><p>安装 redis</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i redis</span><br></pre></td></tr></table></figure><p>启动项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line">open http://localhost:7001</span><br></pre></td></tr></table></figure><p>先创建 controller 和 service 目录，用来放处理请求和返回数据的方法，完成后的项目目录为</p><p><img src="/images/egg-folder.jpg" alt="folder"></p><p>修改 router.js 文件，添加路由，然后在 controller/home.js 文件实现 stars 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; router, controller &#125; = app</span><br><span class="line"></span><br><span class="line">  router.get(<span class="string">'/'</span>, controller.home.index)</span><br><span class="line">  router.get(<span class="string">'/stars'</span>, controller.home.stars)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 controller/home.js 文件，接收请求传过来的 query 参数向下传给 stars service 返回结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Controller = <span class="built_in">require</span>(<span class="string">'egg'</span>).Controller</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> stars() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx, service &#125; = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">const</span> &#123; owner, name &#125; = ctx.query</span><br><span class="line"></span><br><span class="line">    ctx.body = <span class="keyword">await</span> service.home.stars(owner, name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = HomeController</span><br></pre></td></tr></table></figure><p>在 service/home.js 里实现 stars 方法，需要做的就是通过 controller 传过来的 owner, name 参数，请求 Github 的接口，返回数据。</p><p>需要注意的是，这里请求的是 Github 的 graphql 接口，所以首先需要在 Github 上新建一个 token，token 不能直接写在代码里面，需要将 token 放在环境变量里，否则代码提交到 Github 后会失效。</p><p><img src="/images/redis-token.jpg" alt="token"></p><p>创建 token 后使用 <a href="https://github.com/motdotla/dotenv#readme" target="_blank" rel="noopener">dotenv</a> 保存环境变量，先安装然后在项目目录创建一个 .env 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i dotenv</span><br></pre></td></tr></table></figure><p><img src="/images/env.jpg" alt="token"></p><p>然后就可以使用 egg.js 自带的 crul 方法向 Github 接口发送 post 请求，代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'dotenv'</span>).config()</span><br><span class="line"><span class="keyword">const</span> Service = <span class="built_in">require</span>(<span class="string">'egg'</span>).Service</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> stars(owner, name) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setResponse</span>(<span class="params">name, stars</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">msg</span>: <span class="string">`<span class="subst">$&#123;name&#125;</span> has <span class="subst">$&#123;stars&#125;</span> stars.`</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> query = <span class="string">`</span></span><br><span class="line"><span class="string">      query &#123;</span></span><br><span class="line"><span class="string">        repository(owner: <span class="subst">$&#123;owner&#125;</span>, name: <span class="subst">$&#123;name&#125;</span>) &#123;</span></span><br><span class="line"><span class="string">          stargazers &#123;</span></span><br><span class="line"><span class="string">            totalCount</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="keyword">this</span>.ctx.curl(<span class="string">'https://api.github.com/graphql'</span>, &#123;</span><br><span class="line">      method: <span class="string">'POST'</span>,</span><br><span class="line">      dataType: <span class="string">'json'</span>,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        Authorization: <span class="string">`token <span class="subst">$&#123;process.env.TOKEN&#125;</span>`</span></span><br><span class="line">      &#125;,</span><br><span class="line">      data: <span class="built_in">JSON</span>.stringify(&#123; query &#125;),</span><br><span class="line">      timeout: <span class="number">10000</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = result.data.data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> setResponse(name, data.repository.stargazers.totalCount)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = HomeService</span><br></pre></td></tr></table></figure><p>使用 postman 测试一下接口</p><p><img src="/images/redis-before.jpg" alt="folder"></p><p>耗时平均 1 秒左右，接下来就是使用 Redis 添加缓存，首先需要在本地安装 Redis，参考 <a href="https://redis.io/download" target="_blank" rel="noopener">Redis download</a>，Mac 可以直接使用 homebrew 安装</p><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install redis</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server /usr/<span class="built_in">local</span>/etc/redis.conf</span><br></pre></td></tr></table></figure><p>进入 redis 命令行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p>缓存的主要逻辑就是，第一次请求完得到 Github 的数据将数据放到缓存中，再次请求的时候直接使用缓存中的数据，也需要给缓存设置一个过期时间，<br>需要从环境变量中拿到 token，post 请求的数据要用 JSON.stringify 方法传给 Github 接口，否则出现解析错误，代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'dotenv'</span>).config()</span><br><span class="line"><span class="keyword">const</span> redis = <span class="built_in">require</span>(<span class="string">'redis'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; promisify &#125; = <span class="built_in">require</span>(<span class="string">'util'</span>)</span><br><span class="line"><span class="keyword">const</span> Service = <span class="built_in">require</span>(<span class="string">'egg'</span>).Service</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> REDIS_PORT = process.env.PORT || <span class="number">6379</span></span><br><span class="line"><span class="keyword">const</span> client = redis.createClient(REDIS_PORT)</span><br><span class="line"><span class="keyword">const</span> getAsync = promisify(client.get).bind(client)</span><br><span class="line"><span class="keyword">const</span> setexAsync = promisify(client.setex).bind(client)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> stars(owner, name) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = <span class="string">`<span class="subst">$&#123;owner&#125;</span>/<span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line">    <span class="keyword">const</span> stars = <span class="keyword">await</span> getAsync(key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setResponse</span>(<span class="params">name, stars</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">msg</span>: <span class="string">`<span class="subst">$&#123;name&#125;</span> has <span class="subst">$&#123;stars&#125;</span> stars.`</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (stars !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> setResponse(name, stars)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> query = <span class="string">`</span></span><br><span class="line"><span class="string">      query &#123;</span></span><br><span class="line"><span class="string">        repository(owner: <span class="subst">$&#123;owner&#125;</span>, name: <span class="subst">$&#123;name&#125;</span>) &#123;</span></span><br><span class="line"><span class="string">          stargazers &#123;</span></span><br><span class="line"><span class="string">            totalCount</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="keyword">this</span>.ctx.curl(<span class="string">'https://api.github.com/graphql'</span>, &#123;</span><br><span class="line">      method: <span class="string">'POST'</span>,</span><br><span class="line">      dataType: <span class="string">'json'</span>,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        Authorization: <span class="string">`token <span class="subst">$&#123;process.env.TOKEN&#125;</span>`</span></span><br><span class="line">      &#125;,</span><br><span class="line">      data: <span class="built_in">JSON</span>.stringify(&#123; query &#125;),</span><br><span class="line">      timeout: <span class="number">10000</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = result.data.data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> setexAsync(key, <span class="number">10</span>, data.repository.stargazers.totalCount)</span><br><span class="line">    <span class="keyword">return</span> setResponse(name, data.repository.stargazers.totalCount)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = HomeService</span><br></pre></td></tr></table></figure><p>再次测试，首先把 Redis 里面的缓存清空，使用 Redis 的命令行运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FLUSHALL</span><br></pre></td></tr></table></figure><p>发送请求，第一次的耗时还是一秒多，然后在失效时间内请求，可以看到使用缓存的数据后耗时大大减少了，性能提升效果显著，实际项目可以设置一个较长的缓存失效时间</p><p><img src="/images/redis-after.jpg" alt="folder"></p><p>当然缓存过期后又要重新向 Github 发送请求了，因为 Redis 已经把数据删除了</p><p><img src="/images/redis-vue.jpg" alt="folder"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://redis.io/documentation" target="_blank" rel="noopener">Redis documentation</a></p><p><a href="https://github.com/noderedis/node_redis" target="_blank" rel="noopener">Node Redis</a></p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法之字典</title>
      <link href="/post/2019/08/28/dsa-dictionary/"/>
      <url>/post/2019/08/28/dsa-dictionary/</url>
      
        <content type="html"><![CDATA[<p>字典是一种以键值对形式存储数据的数据结构，键用来查找，值用来保存数据</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>字典是一种以键值对形式存储数据的数据结构，键用来查找，值用来保存数据</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Dictionary &#123;</span><br><span class="line">  data: <span class="built_in">any</span>[] = []</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加元素</span></span><br><span class="line">  add(key: <span class="built_in">any</span>, value: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.data[key] = value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查找元素</span></span><br><span class="line">  find(key: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data[key]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除元素</span></span><br><span class="line">  remove(key: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.data[key]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 显示元素</span></span><br><span class="line">  show() &#123;</span><br><span class="line">    <span class="built_in">Object</span>.entries(<span class="keyword">this</span>.data).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'key:'</span>, item[<span class="number">0</span>], <span class="string">' value:'</span>, item[<span class="number">1</span>])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 元素个数</span></span><br><span class="line">  count() &#123;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">0</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.data).forEach(_ =&gt; &#123;</span><br><span class="line">      n += <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清空元素</span></span><br><span class="line">  clear() &#123;</span><br><span class="line">    <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.data).forEach(<span class="function">(<span class="params">key: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="keyword">this</span>.data[key]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dictionary = <span class="keyword">new</span> Dictionary()</span><br><span class="line"></span><br><span class="line">dictionary.add(<span class="string">'a'</span>, <span class="string">'a'</span>)</span><br><span class="line">dictionary.add(<span class="string">'b'</span>, <span class="string">'b'</span>)</span><br><span class="line">dictionary.add(<span class="string">'c'</span>, <span class="string">'c'</span>)</span><br><span class="line">dictionary.add(<span class="string">'d'</span>, <span class="string">'d'</span>)</span><br><span class="line">dictionary.add(<span class="string">'e'</span>, <span class="string">'e'</span>)</span><br><span class="line"></span><br><span class="line">dictionary.show()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'count: '</span>, dictionary.count())</span><br><span class="line"></span><br><span class="line">dictionary.clear()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'clear: '</span>, dictionary.count())</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">key: a  value: a</span><br><span class="line">key: b  value: b</span><br><span class="line">key: c  value: c</span><br><span class="line">key: d  value: d</span><br><span class="line">key: e  value: e</span><br><span class="line">count:  5</span><br><span class="line">clear:  0</span><br></pre></td></tr></table></figure><p>排序字典的输出，需要重新定义 show 方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显示元素</span></span><br><span class="line">show() &#123;</span><br><span class="line">  <span class="built_in">Object</span>.entries(<span class="keyword">this</span>.data)</span><br><span class="line">.sort()</span><br><span class="line">.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'key:'</span>, item[<span class="number">0</span>], <span class="string">' value:'</span>, item[<span class="number">1</span>])</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dictionary = <span class="keyword">new</span> Dictionary()</span><br><span class="line"></span><br><span class="line">dictionary.add(<span class="string">'c'</span>, <span class="string">'c'</span>)</span><br><span class="line">dictionary.add(<span class="string">'a'</span>, <span class="string">'a'</span>)</span><br><span class="line">dictionary.add(<span class="string">'d'</span>, <span class="string">'d'</span>)</span><br><span class="line">dictionary.add(<span class="string">'e'</span>, <span class="string">'e'</span>)</span><br><span class="line">dictionary.add(<span class="string">'b'</span>, <span class="string">'b'</span>)</span><br><span class="line"></span><br><span class="line">dictionary.show()</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">key: a  value: a</span><br><span class="line">key: b  value: b</span><br><span class="line">key: c  value: c</span><br><span class="line">key: d  value: d</span><br><span class="line">key: e  value: e</span><br></pre></td></tr></table></figure><p>使用 Object.keys 方法拿到字典的 keys 数组后，在用 sort 方法就可以显示有序的字典输出了</p>]]></content>
      
      
      
        <tags>
            
            <tag> DSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法之链表</title>
      <link href="/post/2019/08/25/dsa-linklist/"/>
      <url>/post/2019/08/25/dsa-linklist/</url>
      
        <content type="html"><![CDATA[<p>链表是一组节点组成的集合，每个节点都使用一个对象的引用指向它的下一个节点，指向节点的引用叫做链</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>链表是一组节点组成的集合，每个节点都使用一个对象的引用指向它的下一个节点，指向节点的引用叫做链。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>使用 LinkedListNode 类来表示节点，使用 LinkedList 来表示链表</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> LinkedListNode &#123;</span><br><span class="line">  element: <span class="built_in">any</span></span><br><span class="line">  next: LinkedListNode</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">element: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.element = element</span><br><span class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> LinkedList &#123;</span><br><span class="line">  <span class="comment">// 头节点</span></span><br><span class="line">  head: LinkedListNode</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.head = <span class="keyword">new</span> LinkedListNode(<span class="string">'head'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查找</span></span><br><span class="line">  find(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode: LinkedListNode = <span class="keyword">this</span>.head</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (currentNode.element !== element) &#123;</span><br><span class="line">      currentNode = currentNode.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> currentNode</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 插入</span></span><br><span class="line">  insert(element: <span class="built_in">any</span>, item: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> LinkedListNode(element)</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.find(item)</span><br><span class="line"></span><br><span class="line">    newNode.next = currentNode.next</span><br><span class="line">    currentNode.next = newNode</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 移除</span></span><br><span class="line">  remove(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> prevNode = <span class="keyword">this</span>.findPrevNode(element)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(prevNode.next === <span class="literal">null</span>)) &#123;</span><br><span class="line">      prevNode.next = prevNode.next.next</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  findPrevNode(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.head</span><br><span class="line">    <span class="keyword">while</span> (</span><br><span class="line">      !(currentNode.next === <span class="literal">null</span>) &amp;&amp;</span><br><span class="line">      currentNode.next.element !== element</span><br><span class="line">    ) &#123;</span><br><span class="line">      currentNode = currentNode.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> currentNode</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 显示</span></span><br><span class="line">  display() &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.head</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!(currentNode.next === <span class="literal">null</span>)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(currentNode.next.element)</span><br><span class="line">      currentNode = currentNode.next</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foods = <span class="keyword">new</span> LinkedList()</span><br><span class="line"></span><br><span class="line">foods.insert(<span class="string">'eggs'</span>, <span class="string">'head'</span>)</span><br><span class="line">foods.insert(<span class="string">'apple'</span>, <span class="string">'eggs'</span>)</span><br><span class="line">foods.insert(<span class="string">'bread'</span>, <span class="string">'apple'</span>)</span><br><span class="line">foods.insert(<span class="string">'chese'</span>, <span class="string">'bread'</span>)</span><br><span class="line">foods.insert(<span class="string">'rice'</span>, <span class="string">'chese'</span>)</span><br><span class="line">foods.display()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'------------'</span>)</span><br><span class="line">foods.remove(<span class="string">'bread'</span>)</span><br><span class="line">foods.display()</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">eggs</span><br><span class="line">apple</span><br><span class="line">bread</span><br><span class="line">chese</span><br><span class="line">rice</span><br><span class="line">------------</span><br><span class="line">eggs</span><br><span class="line">apple</span><br><span class="line">chese</span><br><span class="line">rice</span><br></pre></td></tr></table></figure><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>要实现双向链表首先要为 LinkedListNode 类增加一个 prev 属性</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> LinkedListNode &#123;</span><br><span class="line">  element: <span class="built_in">any</span></span><br><span class="line">  prev: LinkedListNode</span><br><span class="line">  next: LinkedListNode</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">element: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.element = element</span><br><span class="line">    <span class="keyword">this</span>.prev = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改 LinkedList 类的 insert, remove 方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> LinkedList &#123;</span><br><span class="line">  <span class="comment">// 头节点</span></span><br><span class="line">  head: LinkedListNode = <span class="keyword">new</span> LinkedListNode(<span class="string">'head'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查找</span></span><br><span class="line">  find(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.head</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (currentNode.element !== element) &#123;</span><br><span class="line">      currentNode = currentNode.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> currentNode</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 找到最后的节点</span></span><br><span class="line">  findLast() &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.head</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (currentNode.next !== <span class="literal">null</span>) &#123;</span><br><span class="line">      currentNode = currentNode.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> currentNode</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 插入</span></span><br><span class="line">  insert(element: <span class="built_in">any</span>, item: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> LinkedListNode(element)</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.find(item)</span><br><span class="line"></span><br><span class="line">    newNode.prev = currentNode</span><br><span class="line">    newNode.next = currentNode.next</span><br><span class="line">    currentNode.next = newNode</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 移除</span></span><br><span class="line">  remove(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.find(element)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentNode.next !== <span class="literal">null</span>) &#123;</span><br><span class="line">      currentNode.prev.next = currentNode.next</span><br><span class="line">      currentNode.next.prev = currentNode.prev</span><br><span class="line">      currentNode.next = <span class="literal">null</span></span><br><span class="line">      currentNode.prev = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 显示</span></span><br><span class="line">  display() &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.head</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!(currentNode.next === <span class="literal">null</span>)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(currentNode.next.element)</span><br><span class="line">      currentNode = currentNode.next</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 倒叙显示</span></span><br><span class="line">  displayReverse() &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.findLast()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (currentNode.prev !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(currentNode.element)</span><br><span class="line">      currentNode = currentNode.prev</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">foods.insert(<span class="string">'eggs'</span>, <span class="string">'head'</span>)</span><br><span class="line">foods.insert(<span class="string">'apple'</span>, <span class="string">'eggs'</span>)</span><br><span class="line">foods.insert(<span class="string">'bread'</span>, <span class="string">'apple'</span>)</span><br><span class="line">foods.insert(<span class="string">'chese'</span>, <span class="string">'bread'</span>)</span><br><span class="line">foods.insert(<span class="string">'rice'</span>, <span class="string">'chese'</span>)</span><br><span class="line">foods.display()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'------------'</span>)</span><br><span class="line">foods.remove(<span class="string">'bread'</span>)</span><br><span class="line">foods.display()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'------------'</span>)</span><br><span class="line">foods.displayReverse()</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">eggs</span><br><span class="line">apple</span><br><span class="line">bread</span><br><span class="line">chese</span><br><span class="line">rice</span><br><span class="line">------------</span><br><span class="line">eggs</span><br><span class="line">apple</span><br><span class="line">chese</span><br><span class="line">rice</span><br><span class="line">------------</span><br><span class="line">rice</span><br><span class="line">chese</span><br><span class="line">apple</span><br><span class="line">eggs</span><br></pre></td></tr></table></figure><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><p>创建循环链表需要让它的头节点的 next 属性指向本身， 然后修改 display 方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.head.next = <span class="keyword">this</span>.head</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 显示</span></span><br><span class="line">display() &#123;</span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.head</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (currentNode.next !== <span class="literal">null</span> &amp;&amp; currentNode.next.element !== <span class="string">'head'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(currentNode.next.element)</span><br><span class="line">    currentNode = currentNode.next</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>链表是一种高效的数据结构，如果发现数组在使用时很慢，就可以考虑用链表替代它，但是如果需要对数据随机访问，数组任然是更优的选择</p>]]></content>
      
      
      
        <tags>
            
            <tag> DSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在 Egg.js 中使用 Sequelize 的事务 Transaction</title>
      <link href="/post/2019/08/22/egg-sequelize-transaction/"/>
      <url>/post/2019/08/22/egg-sequelize-transaction/</url>
      
        <content type="html"><![CDATA[<p>在查了几遍 <a href="https://sequelize.org/" target="_blank" rel="noopener">Sequelize</a> 关于 <a href="https://sequelize.org/master/manual/transactions.html" target="_blank" rel="noopener">Transactions</a> 的文档，看了大佬同事的代码后，我终于弄懂怎么在 egg.js 框架里面使用事务了 😓</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在查了几遍 <a href="https://sequelize.org/" target="_blank" rel="noopener">Sequelize</a> 关于 <a href="https://sequelize.org/master/manual/transactions.html" target="_blank" rel="noopener">Transactions</a> 的文档，看了大佬同事的代码后，我终于弄懂怎么在 egg.js 框架里面使用事务了 😓</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>Sequelize 关于事务的示例代码是这样滴，首先通过 <code>sequelize.transaction</code> 方法创建了一个事务后，把这个事务传给需要进行操作的函数，如新增用户，给用户加属性等，但是看上去代码比较难懂</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> sequelize.transaction().then(<span class="function"><span class="params">t</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> User.create(</span><br><span class="line">    &#123;</span><br><span class="line">      firstName: <span class="string">'Bart'</span>,</span><br><span class="line">      lastName: <span class="string">'Simpson'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">transaction</span>: t &#125;</span><br><span class="line">  )</span><br><span class="line">    .then(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> user.addSibling(</span><br><span class="line">        &#123;</span><br><span class="line">          firstName: <span class="string">'Lisa'</span>,</span><br><span class="line">          lastName: <span class="string">'Simpson'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123; <span class="attr">transaction</span>: t &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> t.commit()</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> t.rollback()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>实际使用的话需要用 <code>async/await</code> 语法让代码看起来更加清晰一点，在 egg.js 中使用的示例如下，首先需要用当前上下文中的 model 对象（就是对数据表的映射对象）创建一个事务，然后在 <code>try/catch</code> 中执行所要进行的操作，如果操作抛出了异常，那么就会回滚</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> transaction = <span class="keyword">await</span> <span class="keyword">this</span>.ctx.model.transaction()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">this</span>.ctx.model.create(<span class="keyword">this</span>.ctx.request.body, &#123; transaction &#125;)</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">this</span>.ctx.service.user.find(userId, &#123; transaction &#125;);</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">this</span>.ctx.service.product.destory(productId, &#123; transaction &#125;);</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">await</span> transaction.commit()</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="keyword">await</span> transaction.rollback()</span><br><span class="line">  <span class="keyword">throw</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用了 <code>async/await</code> 语法，代码确实清晰了很多</p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Egg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法之队列</title>
      <link href="/post/2019/08/18/das-queue/"/>
      <url>/post/2019/08/18/das-queue/</url>
      
        <content type="html"><![CDATA[<p>队列是一种列表，只能在队尾插入元素，在队首删除元素。队列用于存储按顺序排列的的数据，先进先出，可以将队列想象成在饭店排队取餐的人群，在队伍前面的先取餐，后来的人后取餐</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>队列是一种列表，只能在队尾插入元素，在队首删除元素。队列用于存储按顺序排列的的数据，先进先出，可以将队列想象成在饭店排队取餐的人群，在队伍前面的先取餐，后来的人后取餐。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>用 TypeScript 实现队列</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Queue &#123;</span><br><span class="line">  data: <span class="built_in">Array</span>&lt;<span class="built_in">any</span>&gt; = []</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 入队</span></span><br><span class="line">  enqueue(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.data.push(element)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 出队</span></span><br><span class="line">  dequeue() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.shift()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回第一个元素</span></span><br><span class="line">  front() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回最后一个元素</span></span><br><span class="line">  back() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data[<span class="keyword">this</span>.data.length - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 显示队列中所有元素</span></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.map(<span class="function"><span class="params">ele</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;ele&#125;</span>`</span>).toString()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断队列是否为空</span></span><br><span class="line">  empty() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.data.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> Queue()</span><br><span class="line"></span><br><span class="line">queue.enqueue(<span class="string">'a'</span>)</span><br><span class="line">queue.enqueue(<span class="string">'b'</span>)</span><br><span class="line">queue.enqueue(<span class="string">'c'</span>)</span><br><span class="line">queue.enqueue(<span class="string">'d'</span>)</span><br><span class="line">queue.enqueue(<span class="string">'e'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'queue: '</span>, queue)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'front: '</span>, queue.front())</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'back: '</span>, queue.back())</span><br><span class="line"></span><br><span class="line">queue.dequeue()</span><br><span class="line">queue.dequeue()</span><br><span class="line">queue.dequeue()</span><br><span class="line">queue.dequeue()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'queue: '</span>, queue)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'queue: '</span>, queue.empty())</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">queue:  Queue &#123; data: [ 'a', 'b', 'c', 'd', 'e' ] &#125;</span><br><span class="line"></span><br><span class="line">front: a</span><br><span class="line"></span><br><span class="line">back:  e</span><br><span class="line"></span><br><span class="line">queue:  Queue &#123; data: [ 'e' ] &#125;</span><br><span class="line"></span><br><span class="line">queue:  false</span><br></pre></td></tr></table></figure><h2 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h2><p>优先队列指的是在删除队列中元素的时候需要考虑元素的优先级，优先级高的元素先出队，优先级低的后出队，同等优先级的元素按原本的顺序出队。</p><p>首先需要一个具有优先级的元素</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Element &#123;</span><br><span class="line">  data: <span class="built_in">any</span></span><br><span class="line">  code: <span class="built_in">number</span> <span class="comment">// code 表示优先级，数值越小优先级越高，0 为最高</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后需要修改下队列的出队方法，找到队列中优先级最高的元素，然后将其移除队列</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dequeue() &#123;</span><br><span class="line">  <span class="keyword">const</span> codes = <span class="keyword">this</span>.data.map(<span class="function"><span class="params">ele</span> =&gt;</span> ele.code)</span><br><span class="line">  <span class="keyword">const</span> minCode = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, codes)</span><br><span class="line">  <span class="keyword">const</span> index = <span class="keyword">this</span>.data.findIndex(<span class="function"><span class="params">ele</span> =&gt;</span> ele.code === minCode)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.data.splice(index, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> Queue()</span><br><span class="line"></span><br><span class="line">queue.enqueue(&#123; data: <span class="string">'a'</span>, code: <span class="number">5</span> &#125;)</span><br><span class="line">queue.enqueue(&#123; data: <span class="string">'b'</span>, code: <span class="number">4</span> &#125;)</span><br><span class="line">queue.enqueue(&#123; data: <span class="string">'c'</span>, code: <span class="number">3</span> &#125;)</span><br><span class="line">queue.enqueue(&#123; data: <span class="string">'d'</span>, code: <span class="number">2</span> &#125;)</span><br><span class="line">queue.enqueue(&#123; data: <span class="string">'e'</span>, code: <span class="number">1</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'queue: '</span>, queue)</span><br><span class="line"></span><br><span class="line">queue.dequeue()</span><br><span class="line">queue.dequeue()</span><br><span class="line">queue.dequeue()</span><br><span class="line">queue.dequeue()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'queue: '</span>, queue)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">queue:  Queue &#123;</span><br><span class="line">  data:</span><br><span class="line">   [</span><br><span class="line">     &#123; data: 'a', code: 5 &#125;,</span><br><span class="line">     &#123; data: 'b', code: 4 &#125;,</span><br><span class="line">     &#123; data: 'c', code: 3 &#125;,</span><br><span class="line">     &#123; data: 'd', code: 2 &#125;,</span><br><span class="line">     &#123; data: 'e', code: 1 &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">queue:  Queue &#123;</span><br><span class="line">  data:</span><br><span class="line">    [</span><br><span class="line">      &#123; data: 'a', code: 5 &#125;,</span><br><span class="line">      &#123; data: 'b', code: 4 &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到队列中剩下了优先级较低的元素</p>]]></content>
      
      
      <categories>
          
          <category> DSA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 Flutter 的安卓打包</title>
      <link href="/post/2019/08/14/flutter-android-build/"/>
      <url>/post/2019/08/14/flutter-android-build/</url>
      
        <content type="html"><![CDATA[<p>Flutter 在打包安卓应用时有两种方式 <code>flutter build apk</code> 和 <code>flutter build appbundle</code>，本文说下这两种方式有什么区别</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Flutter 在打包安卓应用时有两种方式 <code>flutter build apk</code> 和 <code>flutter build appbundle</code>，本文说下这两种方式有什么区别。</p><h2 id="Appbundle"><a href="#Appbundle" class="headerlink" title="Appbundle"></a>Appbundle</h2><p>Android App Bundle 是上传到 Google Play 用以支持 Dynamic Delivery 的文件，扩展名为 .aab，一个 bundle 包含所有应用的已编译代码和资源，但是还没有生成 apk 和 Google Play 的签名。</p><p>Google Play 的新应用服务模式称为 Dynamic Delivery（动态传送），使用你的应用包为每个用户的设备配置生成并提供优化的 APK，因此用户只下载运行应用所需的代码和资源。开发者不再需要构建，签名和管理多个 APK 来支持不同的设备，用户可以获得更小，更优化的下载。</p><p><a href="https://developer.android.com/guide/app-bundle" target="_blank" rel="noopener">官方文档</a></p><h2 id="Apk"><a href="#Apk" class="headerlink" title="Apk"></a>Apk</h2><p>如果应用不发布到 Google Play，则需要发布多个 apk，但必须自己构建，签名和管理每个 apk。</p><p>通常构建一个 apk 用以支持所有目标设备，但由于需要支持多个屏幕密度或应用程序二进制接口（ABI）的文件，这可能会导致非常大的 apk，减少 apk 大小的一种方法是创建多个 apk，在执行 <code>flutter build apk</code> 的时候可以添加构建参数 <code>--target-platform android-arm,android-arm64 --split-per-abi</code>， 这样构建出来的 apk 包含特定屏幕密度或 ABI 的文件。</p><p><a href="https://developer.android.com/studio/build/configure-apk-splits" target="_blank" rel="noopener">官方文档</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法之栈</title>
      <link href="/post/2019/08/10/dsa-stack/"/>
      <url>/post/2019/08/10/dsa-stack/</url>
      
        <content type="html"><![CDATA[<p>栈是一种高效的数据结构，因为它只能在栈顶添加或删除，这样的操作很快，它是被称之为后入先出（LIFO，last in first out）的数据结构。可以将栈想象成一叠装菜的盘子，用的时候先拿最上面的，洗好的盘子又会放到最上面</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>栈是一种高效的数据结构，因为它只能在栈顶添加或删除，这样的操作很快，它是被称之为后入先出（LIFO，last in first out）的数据结构。可以将栈想象成一叠装菜的盘子，用的时候先拿最上面的，洗好的盘子又会放到最上面。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>用 TypeScript 实现栈</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Stack &#123;</span><br><span class="line">  top: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">  data: <span class="built_in">Array</span>&lt;<span class="built_in">any</span>&gt; = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> length() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.top</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 向栈中压入一个新元素</span></span><br><span class="line">  push(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.data.push(element)</span><br><span class="line">    <span class="keyword">this</span>.top += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回栈顶元素, 同时将 top 值减 1</span></span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">this</span>.top -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.pop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回栈顶元素</span></span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.data.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data[<span class="keyword">this</span>.top - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清空栈</span></span><br><span class="line">  clear() &#123;</span><br><span class="line">    <span class="keyword">this</span>.top = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stack = <span class="keyword">new</span> Stack()</span><br><span class="line"></span><br><span class="line">stack.push(<span class="string">'aaa'</span>)</span><br><span class="line">stack.push(<span class="string">'bbb'</span>)</span><br><span class="line">stack.push(<span class="string">'ccc'</span>)</span><br><span class="line">stack.push(<span class="string">'ddd'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'执行 push 方法后\n'</span>, stack)</span><br><span class="line"></span><br><span class="line">stack.pop()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'执行 pop 方法后\n'</span>, stack)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'执行 peek 方法后返回：'</span>, stack.peek())</span><br><span class="line"></span><br><span class="line">stack.clear()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'执行 clear 方法后\n'</span>, stack)</span><br><span class="line"></span><br><span class="line">执行 push 方法后</span><br><span class="line"> Stack &#123; data: [ <span class="string">'aaa'</span>, <span class="string">'bbb'</span>, <span class="string">'ccc'</span>, <span class="string">'ddd'</span> ], top: <span class="number">4</span> &#125;</span><br><span class="line">执行 pop 方法后</span><br><span class="line"> Stack &#123; data: [ <span class="string">'aaa'</span>, <span class="string">'bbb'</span>, <span class="string">'ccc'</span> ], top: <span class="number">3</span> &#125;</span><br><span class="line">执行 peek 方法后返回： ccc</span><br><span class="line">执行 clear 方法后</span><br><span class="line"> Stack &#123; data: [ <span class="string">'aaa'</span>, <span class="string">'bbb'</span>, <span class="string">'ccc'</span> ], top: <span class="number">0</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="数制间的转换，将-10-进制的数转化为另一种进制"><a href="#数制间的转换，将-10-进制的数转化为另一种进制" class="headerlink" title="数制间的转换，将 10 进制的数转化为另一种进制"></a>数制间的转换，将 10 进制的数转化为另一种进制</h3><p>此算法只针对基数为 2 ～ 9 的情况</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mulBase</span>(<span class="params">num: <span class="built_in">number</span>, base: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> stack = <span class="keyword">new</span> Stack()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    stack.push(num % base)</span><br><span class="line">    num = <span class="built_in">Math</span>.floor((num /= base))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> converted = <span class="string">''</span></span><br><span class="line">  <span class="keyword">while</span> (stack.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    converted += stack.pop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> converted</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'num = 2 base = 2：'</span>, mulBase(<span class="number">2</span>, <span class="number">2</span>)) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'num = 32 base = 2：'</span>, mulBase(<span class="number">32</span>, <span class="number">2</span>)) <span class="comment">// 100000</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'num = 125 base = 8：'</span>, mulBase(<span class="number">125</span>, <span class="number">8</span>)) <span class="comment">// 175</span></span><br></pre></td></tr></table></figure><h3 id="判断回文"><a href="#判断回文" class="headerlink" title="判断回文"></a>判断回文</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span>(<span class="params">word: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> rword = <span class="string">''</span></span><br><span class="line">  <span class="keyword">const</span> stack = <span class="keyword">new</span> Stack()</span><br><span class="line"></span><br><span class="line">  word.split(<span class="string">''</span>).forEach(<span class="function"><span class="params">w</span> =&gt;</span> stack.push(w))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (stack.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">     rword += stack.pop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(word === rword) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello'</span>, isPalindrome(<span class="string">'hello'</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'bob'</span>, isPalindrome(<span class="string">'bob'</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'racecar'</span>, isPalindrome(<span class="string">'racecar'</span>));</span><br><span class="line"></span><br><span class="line">hello <span class="literal">false</span></span><br><span class="line">bob <span class="literal">true</span></span><br><span class="line">racecar <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法之列表</title>
      <link href="/post/2019/08/08/datastructure-list/"/>
      <url>/post/2019/08/08/datastructure-list/</url>
      
        <content type="html"><![CDATA[<p>列表是一种常用的数据结构，如代办事项，十佳榜单等。当不需要在一个很长的序列中查找元素，或者对其排序时，列表显得尤其有用</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>列表是一种常用的数据结构，如代办事项，十佳榜单等。当不需要在一个很长的序列中查找元素，或者对其排序时，列表显得尤其有用</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>使用 TypeScript 实现列表类，要实现的的列表类是</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> List &#123;</span><br><span class="line">  pos: <span class="built_in">number</span> <span class="comment">// 列表当前位置</span></span><br><span class="line">  listSize: <span class="built_in">number</span> <span class="comment">// 列表的元素个数</span></span><br><span class="line">  data: [] <span class="comment">// 列表的数据存储位置</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.pos = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.listSize = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.data = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> length() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.listSize</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清空列表中的所有元素</span></span><br><span class="line">  clear() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回列表的字符串形式</span></span><br><span class="line">  toString() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回当前位置的元素</span></span><br><span class="line">  getElement() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在现有元素后插入新元素</span></span><br><span class="line">  insert() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在列表的末尾添加新元素</span></span><br><span class="line">  append() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从列表中删除元素</span></span><br><span class="line">  remove() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将列表的当前位置移动到第一个元素</span></span><br><span class="line">  front() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将列表的当前位置移动到最后一个元素</span></span><br><span class="line">  end() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将当前位置向前移一位</span></span><br><span class="line">  prev() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将当前位置向后移一位</span></span><br><span class="line">  next() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否有后一个元素</span></span><br><span class="line">  hasNext() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否有前一个元素</span></span><br><span class="line">  hasPrev() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回列表的当前位置</span></span><br><span class="line">  currentPos() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将列表的当前位置移动到指定位置</span></span><br><span class="line">  moveTo() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将列表类实现后</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> List &#123;</span><br><span class="line">  pos: <span class="built_in">number</span> <span class="comment">// 列表当前位置</span></span><br><span class="line">  data: <span class="built_in">Array</span>&lt;<span class="built_in">any</span>&gt; <span class="comment">// 列表的数据存储</span></span><br><span class="line">  listSize: <span class="built_in">number</span> <span class="comment">// 列表的元素个数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.pos = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.listSize = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.data = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回列表的长度</span></span><br><span class="line">  <span class="keyword">get</span> length() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.listSize</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回列表的当前位置</span></span><br><span class="line">  <span class="keyword">get</span> currentPos() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.pos</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清空列表中的所有元素</span></span><br><span class="line">  clear() &#123;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.data</span><br><span class="line">    <span class="keyword">this</span>.data.length = <span class="keyword">this</span>.listSize = <span class="keyword">this</span>.pos = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回列表的字符串形式</span></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.toString()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回当前位置的元素</span></span><br><span class="line">  getElement() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data[<span class="keyword">this</span>.pos]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在现有元素后插入新元素</span></span><br><span class="line">  insert(element: <span class="built_in">any</span>, after: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> index = <span class="keyword">this</span>.findIndex(after)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.data.splice(index + <span class="number">1</span>, <span class="number">0</span>, element)</span><br><span class="line">      <span class="keyword">this</span>.listSize += <span class="number">1</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在列表的末尾添加新元素</span></span><br><span class="line">  append(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.data.push(element)</span><br><span class="line">    <span class="keyword">this</span>.listSize += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从列表中删除元素</span></span><br><span class="line">  remove(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> index = <span class="keyword">this</span>.findIndex(element)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.data.splice(index, <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">this</span>.listSize -= <span class="number">1</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断元素是否在列表中</span></span><br><span class="line">  contains(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.includes(element)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将列表的当前位置移动到第一个元素</span></span><br><span class="line">  front() &#123;</span><br><span class="line">    <span class="keyword">this</span>.pos = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将列表的当前位置移动到最后一个元素</span></span><br><span class="line">  end() &#123;</span><br><span class="line">    <span class="keyword">this</span>.pos = <span class="keyword">this</span>.listSize - <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将当前位置向前移一位</span></span><br><span class="line">  prev() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.pos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.pos -= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将当前位置向后移一位</span></span><br><span class="line">  next() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.pos &lt; <span class="keyword">this</span>.listSize) &#123;</span><br><span class="line">      <span class="keyword">this</span>.pos += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否有后一个元素</span></span><br><span class="line">  hasNext() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.pos &lt; <span class="keyword">this</span>.listSize</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否有前一个元素</span></span><br><span class="line">  hasPrev() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.pos &gt; <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将列表的当前位置移动到指定位置</span></span><br><span class="line">  moveTo(position: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (position &gt; <span class="number">0</span> &amp;&amp; position &lt; <span class="keyword">this</span>.listSize) &#123;</span><br><span class="line">      <span class="keyword">this</span>.pos = position</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查找元素位置</span></span><br><span class="line">  <span class="keyword">private</span> findIndex(element: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.data.findIndex(<span class="function"><span class="params">ele</span> =&gt;</span> element === ele)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = <span class="keyword">new</span> List()</span><br><span class="line"></span><br><span class="line">list.append(<span class="string">'aaa'</span>)</span><br><span class="line">list.append(<span class="string">'bbb'</span>)</span><br><span class="line">list.append(<span class="string">'ccc'</span>)</span><br><span class="line">list.append(<span class="string">'ddd'</span>)</span><br><span class="line">list.append(<span class="string">'eee'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'list :'</span>, list)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list : List &#123;</span><br><span class="line">  pos: <span class="number">0</span>,</span><br><span class="line">  listSize: <span class="number">5</span>,</span><br><span class="line">  data: [ <span class="string">'aaa'</span>, <span class="string">'bbb'</span>, <span class="string">'ccc'</span>, <span class="string">'ddd'</span>, <span class="string">'eee'</span> ] &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在服务器上搭建 Npm 私服</title>
      <link href="/post/2019/08/08/create-privite-npm-server/"/>
      <url>/post/2019/08/08/create-privite-npm-server/</url>
      
        <content type="html"><![CDATA[<p>部门需要建一个 npm 私服，我查了一下发现有一个很好用的开源工具 <a href="https://github.com/verdaccio/verdaccio" target="_blank" rel="noopener">Verdaccio</a>，有 3 中方式可以在自己的服务器上搭建，以 Centos 为例</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>部门需要建一个 npm 私服，我查了一下发现有一个很好用的开源工具 <a href="https://github.com/verdaccio/verdaccio" target="_blank" rel="noopener">Verdaccio</a>，有 3 中方式可以在自己的服务器上搭建，以 Centos 为例</p><h2 id="使用-Node-js-环境"><a href="#使用-Node-js-环境" class="headerlink" title="使用 Node.js 环境"></a>使用 Node.js 环境</h2><p>首先需要在服务器上安装 node 环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https://rpm.nodesource.com/setup_10.x | sudo bash -</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nodejs</span><br></pre></td></tr></table></figure><p>安装后检查 node 是否正确安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>然后安装 Verdaccio</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g verdaccio</span><br></pre></td></tr></table></figure><p>安装完成就可以使用了， 如果使用的是 root 用户会提示你不要使用 root 账户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">verdaccio</span><br></pre></td></tr></table></figure><p>但是这样退出后服务就停止了，所以需要 pm2 进行启动</p><p>全局安装 pm2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g pm2</span><br></pre></td></tr></table></figure><p>使用 pm2 启动 Verdaccio</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start verdaccio</span><br></pre></td></tr></table></figure><h2 id="使用-Docker"><a href="#使用-Docker" class="headerlink" title="使用 Docker"></a>使用 Docker</h2><p>首先需要在服务器上安装 Docker，有了 Docker 之后就很简单了</p><p>拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull verdaccio/verdaccio</span><br></pre></td></tr></table></figure><p>运行容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --rm --name verdaccio -p 4873:4873 verdaccio/verdaccio</span><br></pre></td></tr></table></figure><h2 id="使用-Cloudron"><a href="#使用-Cloudron" class="headerlink" title="使用 Cloudron"></a>使用 Cloudron</h2><p>这种方式没试过，因为上面两种已经很方便了</p><p>链接 <a href="https://cloudron.io/button/org.eggertsson.verdaccio.html" target="_blank" rel="noopener">https://cloudron.io/button/org.eggertsson.verdaccio.html</a></p><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>私服安装完成后可以通过 ip 地址+端口号的形式访问了 xxx.xxx.xxx.xxx:4873</p><p>要用域名访问的话就需要将自己的域名解析到服务器上去</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://verdaccio.org/docs/en/installation" target="_blank" rel="noopener">https://verdaccio.org/docs/en/installation</a></p>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter World 上线啦</title>
      <link href="/post/2019/08/03/flutter-world-release/"/>
      <url>/post/2019/08/03/flutter-world-release/</url>
      
        <content type="html"><![CDATA[<p>一大波关于 Flutter 的学习资源集合</p><a id="more"></a><h2 id="Flutter-World-上线啦！"><a href="#Flutter-World-上线啦！" class="headerlink" title="Flutter World 上线啦！"></a>Flutter World 上线啦！</h2><p>一大波关于 Flutter 的学习资源集合，想要入坑的同学快去查看吧 👌</p><p><a href="https://flutterworld.site" target="_blank" rel="noopener">https://flutterworld.site</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Centos 中安装 Java8</title>
      <link href="/post/2019/08/01/centos-install-java8/"/>
      <url>/post/2019/08/01/centos-install-java8/</url>
      
        <content type="html"><![CDATA[<p>由于要在服务器上安装 <a href="https://jenkins.io/zh/" target="_blank" rel="noopener">Jenkins</a> 所以首先要安装 java</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于要在服务器上安装 <a href="https://jenkins.io/zh/" target="_blank" rel="noopener">Jenkins</a> 所以首先要安装 java。</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>安装之前最好更新下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure><h2 id="安装-Java8"><a href="#安装-Java8" class="headerlink" title="安装 Java8"></a>安装 Java8</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install java-1.8.0-openjdk</span><br></pre></td></tr></table></figure><h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><h2 id="设置环境变量-JAVA-HOME"><a href="#设置环境变量-JAVA-HOME" class="headerlink" title="设置环境变量 JAVA_HOME"></a>设置环境变量 JAVA_HOME</h2><p>首先找到安装 java 的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-alternatives --config java</span><br></pre></td></tr></table></figure><p>编辑 .bash_profile 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .bash_profile</span><br></pre></td></tr></table></figure><p>添加这一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.191.b12-1.el7_6.x86_64/jre/bin/java</span><br></pre></td></tr></table></figure><p>重新执行刚修改的 .bash_profile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .bash_profile</span><br></pre></td></tr></table></figure><h2 id="验证一下"><a href="#验证一下" class="headerlink" title="验证一下"></a>验证一下</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$JAVA_HOME</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解 Flutter 应用和部件的生命周期</title>
      <link href="/post/2019/07/28/understand-flutter-lifecycle/"/>
      <url>/post/2019/07/28/understand-flutter-lifecycle/</url>
      
        <content type="html"><![CDATA[<p>在 Flutter 里面部件以及应用本身都有自己的生命周期，本文分别说明它们的生命周期</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Flutter 里面部件以及应用本身都有自己的生命周期，本文分别说明它们的生命周期</p><h2 id="部件"><a href="#部件" class="headerlink" title="部件"></a>部件</h2><p>在 Flutter 里面有两种部件 StatefulWidget 和 StatelessWidget，它们的生命周期分别是</p><h3 id="StatelessWidget"><a href="#StatelessWidget" class="headerlink" title="StatelessWidget"></a>StatelessWidget</h3><p>无状态部件的生命周期很简单，首先执行构造函数然后就执行 build 方法了</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">Constructor</span> <span class="title">Function</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">build</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h3 id="StatefulWidget"><a href="#StatefulWidget" class="headerlink" title="StatefulWidget"></a>StatefulWidget</h3><p>有状态部件的生命周期会复杂一些，因为是多了状态变化。首先是构造函数，然后会初始化 State 在执行 build 方法，如果执行了 setState 方法，就要检查部件是否更新，在执行 build，最后部件销毁的时候执行 dispose 方法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Constructor Function</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">initState</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">build</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setState</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">didUpdateWidget</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">build</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">dispose</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>Flutter 应用本身也有自己的生命周期，要观察到这些状态的变化需要让一个有状态部件混入 <code>WidgetsBindingObserver</code>，然后在 <code>initState</code> 方法中创建一个观察者，当然部件销毁的时候需要把创建的观察者实现清除</p><ul><li><p>inactive 应用处于非活动状态，并且未接收用户输入</p></li><li><p>paused 应用当前对用户不可见，不响应用户输入，并在后台运行</p></li><li><p>resumed 应用可见并响应用户输入</p></li><li><p>suspending 应用退出了</p></li></ul><p>代码</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">MaterialApp</span>(</span><br><span class="line">      title: <span class="symbol">'Flutter</span> <span class="type">Lifecycle</span>',</span><br><span class="line">      home: <span class="type">MyHomePage</span>(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyHomePageState createState() =&gt; _MyHomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyHomePageState</span> <span class="keyword">extends</span> <span class="title">State&lt;MyHomePage&gt;</span> <span class="keyword">with</span> <span class="title">WidgetsBindingObserver</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  void initState() &#123;</span><br><span class="line">    <span class="type">WidgetsBinding</span>.instance.addObserver(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  void didChangeAppLifecycleState(<span class="type">AppLifecycleState</span> state) &#123;</span><br><span class="line">print(state);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  void dispose() &#123;</span><br><span class="line">    <span class="type">WidgetsBinding</span>.instance.removeObserver(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Scaffold</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在 Flutter 应用里面这些生命周期还是挺简单易懂的</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对于 Workbox Strategies几种策略的解释</title>
      <link href="/post/2019/07/26/about-workbox-strategies/"/>
      <url>/post/2019/07/26/about-workbox-strategies/</url>
      
        <content type="html"><![CDATA[<p>要将自己的网站支持 PWA，需要注册一个 serviceWorker 到浏览器中，通常使用 Google 的 <a href="https://developers.google.com/web/tools/workbox/" target="_blank" rel="noopener">Workbox</a> 工具，Workbox 可以在浏览器请求资源的时候提供了几种不同的策略对请求响应，本文对几种策略进行说明</p><a id="more"></a><p>要将自己的网站支持 PWA，需要注册一个 serviceWorker 到浏览器中，通常使用 Google 的 <a href="https://developers.google.com/web/tools/workbox/" target="_blank" rel="noopener">Workbox</a> 工具，Workbox 可以在浏览器请求资源的时候提供了几种不同的策略对请求响应，本文对几种策略进行说明。</p><h2 id="StaleWhileRevalidate"><a href="#StaleWhileRevalidate" class="headerlink" title="StaleWhileRevalidate"></a>StaleWhileRevalidate</h2><p>StaleWhileRevalidate 模式允许您使用缓存的响应尽快响应请求，如果未缓存，则返回到网络请求，然后，用网络请求更新缓存。</p><p><img src="https://developers.google.com/web/tools/workbox/images/modules/workbox-strategies/stale-while-revalidate.png" alt="StaleWhileRevalidate"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">workbox.routing.registerRoute(</span><br><span class="line">  /\.(?:js|css)$/,</span><br><span class="line">  <span class="keyword">new</span> workbox.strategies.StaleWhileRevalidate(&#123;</span><br><span class="line">    cacheName: <span class="string">'static'</span></span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="CacheFirst"><a href="#CacheFirst" class="headerlink" title="CacheFirst"></a>CacheFirst</h2><p>如果缓存中存在响应，则将使用缓存的响应来完成请求，并且根本不会使用网络。 如果没有缓存的响应，则将通过网络请求来满足请求，并且将缓存响应，以便直接从缓存提供下一个请求。</p><p><img src="https://developers.google.com/web/tools/workbox/images/modules/workbox-strategies/cache-first.png" alt="CacheFirst"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">workbox.routing.registerRoute(</span><br><span class="line">  /\.(?:js|css)$/,</span><br><span class="line">  <span class="keyword">new</span> workbox.strategies.CacheFirst(&#123;</span><br><span class="line">    cacheName: <span class="string">'static'</span></span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="NetworkFirst"><a href="#NetworkFirst" class="headerlink" title="NetworkFirst"></a>NetworkFirst</h2><p>对于频繁更新的请求，网络优先策略是理想的解决方案。 默认情况下，它将尝试从网络获取最新响应，如果请求成功，它会将响应放入缓存中。 如果网络无法返回响应，则将使用缓存的响应。</p><p><img src="https://developers.google.com/web/tools/workbox/images/modules/workbox-strategies/network-first.png" alt="NetworkFirst"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">workbox.routing.registerRoute(</span><br><span class="line">  /\.(?:js|css)$/,</span><br><span class="line">  <span class="keyword">new</span> workbox.strategies.NetworkFirst(&#123;</span><br><span class="line">    cacheName: <span class="string">'static'</span></span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="NetworkOnly"><a href="#NetworkOnly" class="headerlink" title="NetworkOnly"></a>NetworkOnly</h2><p>仅使用网络响应请求。</p><p><img src="https://developers.google.com/web/tools/workbox/images/modules/workbox-strategies/network-only.png" alt="NetworkOnly"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">workbox.routing.registerRoute(</span><br><span class="line">  /\.(?:js|css)$/,</span><br><span class="line">  <span class="keyword">new</span> workbox.strategies.NetworkOnly(&#123;</span><br><span class="line">    cacheName: <span class="string">'static'</span></span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="CacheOnly"><a href="#CacheOnly" class="headerlink" title="CacheOnly"></a>CacheOnly</h2><p>仅使用缓存响应请求。不常见，但如果您有自己的预先缓存步骤，则可能很有用。</p><p><img src="https://developers.google.com/web/tools/workbox/images/modules/workbox-strategies/cache-only.png" alt="CacheOnly"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">workbox.routing.registerRoute(</span><br><span class="line">  /\.(?:js|css)$/,</span><br><span class="line">  <span class="keyword">new</span> workbox.strategies.CacheOnly(&#123;</span><br><span class="line">    cacheName: <span class="string">'static'</span></span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developers.google.com/web/tools/workbox/modules/workbox-strategies" target="_blank" rel="noopener">官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Workbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Travis CI 部署 Hugo 博客到 Github Pages</title>
      <link href="/post/2019/07/26/hugo-travis-github-page/"/>
      <url>/post/2019/07/26/hugo-travis-github-page/</url>
      
        <content type="html"><![CDATA[<p>原本使用的是 Netlify 去部署博客的，域名解析也是通过 Netlify 的 DNS 服务器，但是发现博客在别人的电脑上打不开…发现是域名解析的问题，所以就把博客放到 Github Pages 上了，但是这样就失去了 Netlify 提供的自动构建和部署的能力，需要自己去配置 Travis CI 实现自动部署了</p><a id="more"></a><p>原本使用的是 Netlify 去部署博客的，域名解析也是通过 Netlify 的 DNS 服务器，但是发现博客在别人的电脑上打不开…发现是域名解析的问题，所以就把博客放到 Github Pages 上了，但是这样就失去了 Netlify 提供的自动构建和部署的能力，需要自己去配置 Travis CI 实现自动部署了。</p><h2 id="预先要求"><a href="#预先要求" class="headerlink" title="预先要求"></a>预先要求</h2><ul><li>本地安装了 <a href="https://gohugo.io" target="_blank" rel="noopener">Hugo</a></li><li>一个 <a href="https://github.com/" target="_blank" rel="noopener">Github</a> 账号</li><li>使用 Github 账号登录 <a href="https://travis-ci.org" target="_blank" rel="noopener">Travis</a></li></ul><h2 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h2><p>使用 Hugo 命令行工具新建自己的博客，将代码推送到自己的 Github 仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hugo new site my-blog</span><br><span class="line">...</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h2 id="新建一个-Github-Personal-access-token"><a href="#新建一个-Github-Personal-access-token" class="headerlink" title="新建一个 Github Personal access token"></a>新建一个 Github Personal access token</h2><p>在 <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">https://github.com/settings/tokens</a> 新建一个 Personal access token 用来发布博客到 Github Pages 时进行验证，复制生成的 token，不要刷新或离开当前页面，否则 token 就看不见了，只能重新生成</p><p><img src="/images/github-token.jpg" alt="token"></p><p>登录到 <a href="https://travis-ci.org" target="_blank" rel="noopener">Travis CI</a> 对项目进行关联 <a href="https://travis-ci.org/account/repositories" target="_blank" rel="noopener">https://travis-ci.org/account/repositories</a></p><p>完成后进入设置界面 <code>https://travis-ci.org/your-gihub-user-name/your-gihub-repo/settings</code></p><p>在 Environment Variables 填写 GITHUB_TOKEN 变量，点击 Add 按钮，这样你的环境变量就添加完成了</p><h2 id="配置-travis-yml"><a href="#配置-travis-yml" class="headerlink" title="配置 .travis.yml"></a>配置 .travis.yml</h2><p>因为 Hugo 是用 GO 语言写的，所以要配置 GO 编译环境，在 before_script 里删除了 public 文件夹，如果有自定义域名，将自定义域名输出到构建出来的 CNAME 文件里面去，记得添加 DNS 解析记录到 Gihub 去 <a href="https://help.github.com/cn/articles/using-a-custom-domain-with-github-pages" target="_blank" rel="noopener">参考</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">language: go</span><br><span class="line"></span><br><span class="line">dist: trusty</span><br><span class="line"></span><br><span class="line">sudo: false</span><br><span class="line"></span><br><span class="line">env:</span><br><span class="line">  - HUGO_VERSION=0.56.0</span><br><span class="line"></span><br><span class="line">install: true</span><br><span class="line"></span><br><span class="line">before_script:</span><br><span class="line">  - wget https://github.com/gohugoio/hugo/releases/download/v$&#123;HUGO_VERSION&#125;/hugo_$&#123;HUGO_VERSION&#125;_Linux-64bit.deb</span><br><span class="line">  - sudo dpkg -i hugo_$&#123;HUGO_VERSION&#125;_Linux-64bit.deb</span><br><span class="line">  - rm -rf public || exit 0</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">  - hugo -v --gc --minify</span><br><span class="line">  - echo 'your-custom-domain.com' &gt; public/CNAME</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  provider: pages</span><br><span class="line">  local-dir: public</span><br><span class="line">  skip-cleanup: true</span><br><span class="line">  github-token: $GITHUB_TOKEN</span><br><span class="line">  keep-history: true</span><br><span class="line">  on:</span><br><span class="line">    branch: master</span><br><span class="line"></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">  - master</span><br></pre></td></tr></table></figure><h2 id="提交触发构建"><a href="#提交触发构建" class="headerlink" title="提交触发构建"></a>提交触发构建</h2><p>最后新建一篇文章，push 到 Github 仓库，触发 Travis 构建就可以了，以后博客进行更新后就可以自动构建发布了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hugo new posts/my-first-post.md</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hugo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对于 PWA 应用的 manifest.json 文件的解释</title>
      <link href="/post/2019/07/24/about-manifest/"/>
      <url>/post/2019/07/24/about-manifest/</url>
      
        <content type="html"><![CDATA[<p>网站要支持 PWA，需要一个 <code>manifest.json</code> 文件，W3C Web App Manifest 的草案上定义了以下的字段，解释一下每个字段是什么意思。</p><a id="more"></a><p>网站要支持 PWA，需要一个 <code>manifest.json</code> 文件，W3C Web App Manifest 的草案上定义了以下的字段，解释一下每个字段是什么意思。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">dictionary WebAppManifest &#123;</span><br><span class="line">   TextDirectionType dir = <span class="string">"auto"</span>;</span><br><span class="line">   DOMString lang;</span><br><span class="line">   USVString name;</span><br><span class="line">   USVString short_name;</span><br><span class="line">   USVString description;</span><br><span class="line">   sequence&lt;ImageResource&gt; icons;</span><br><span class="line">   sequence&lt;ImageResource&gt; screenshots;</span><br><span class="line">   sequence&lt;USVString&gt; categories;</span><br><span class="line">   DOMString iarc_rating_id;</span><br><span class="line">   USVString start_url;</span><br><span class="line">   DisplayModeType display = <span class="string">"browser"</span>;</span><br><span class="line">   OrientationLockType orientation;</span><br><span class="line">   USVString theme_color;</span><br><span class="line">   USVString background_color;</span><br><span class="line">   USVString scope;</span><br><span class="line">   ServiceWorkerRegistrationObject serviceworker;</span><br><span class="line">   sequence&lt;ExternalApplicationResource&gt; related_applications;</span><br><span class="line">   boolean prefer_related_applications = <span class="string">"false"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">dictionary ImageResource &#123;</span><br><span class="line">  required USVString src;</span><br><span class="line">  DOMString sizes;</span><br><span class="line">  USVString type;</span><br><span class="line">  USVString purpose;</span><br><span class="line">  USVString platform;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">dictionary ServiceWorkerRegistrationObject &#123;</span><br><span class="line">  required USVString src;</span><br><span class="line">  USVString scope;</span><br><span class="line">  WorkerType type = <span class="string">"classic"</span>;</span><br><span class="line">  ServiceWorkerUpdateViaCache update_via_cache = <span class="string">"imports"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">dictionary ExternalApplicationResource &#123;</span><br><span class="line">  required USVString platform;</span><br><span class="line">  USVString url;</span><br><span class="line">  DOMString id;</span><br><span class="line">  USVString min_version;</span><br><span class="line">  sequence&lt;Fingerprint&gt; fingerprints;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>dir</strong> 指定了 manifest 中具有方向性的成员的基本方向，可以设置 <code>ltr</code> 左至右, <code>rtl</code> 右至左, <code>auto</code> 没有明确方向。</p><p><strong>lang</strong> 指定 manifest 中具有方向性成员的值的主要语言（因为知道语言也可以帮助方向性）。</p><p><strong>name</strong> 表示应用的名称。</p><p><strong>short_name</strong> 表示 Web 应用程序名称的简短版本，用于没有足够空间来显示 Web 应用程序的全名的地方。</p><p><strong>description</strong> 描述 Web 应用程序的目的。</p><p><strong>scope</strong> 表示 Web 应用程序导航范围。</p><p><strong>icons</strong> icons 是 ImageResources 的数组，可以在各种情况下充当 Web 应用程序的图标表示。例如，它们可用于在其他应用程序列表中表示 Web 应用程序，或者将 Web 应用程序与 OS 的任务切换器和/或系统首选项集成。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"icons"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"icon/lowres.webp"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"48x48"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/webp"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"icon/lowres"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"48x48"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"icon/hd_hi.ico"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"72x72 96x96 128x128 256x256"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"icon/hd_hi.svg"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"257x257"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>display</strong> 其值是 DisplayModeType 值之一，表示开发人员对 Web 应用程序的首选显示模式。可以设置</p><ul><li>“fullscreen” 占用整个可用的显示区域；</li><li>“standalone” 使其外观和感觉就像一个独立的本机应用程序；</li><li>“minimal-ui” 类似于 standalone 模式，但为最终用户提供了一些方法来访问用于控制导航的最小 UI 元素集（即，后退，前进，重新加载以及可能以某种方式查看文档的地址）；</li><li>“browser” 使用特定于平台的约定打开 Web 应用程序，以在用户代理中打开超链接（例如，在浏览器选项卡或新窗口中）；</li></ul><p><strong>orientation</strong> Web 应用程序的所有顶级浏览上下文的默认方向。</p><p><strong>start_url</strong> 表示起始 URL 的字符串，该 URL 是用户启动 Web 应用程序时开发人员更喜欢用户代理加载的 URL（例如，当用户从设备的应用程序菜单中单击 Web 应用程序的图标时或主屏幕）。</p><p><strong>serviceworker</strong> 表示应用中 serviceWorker 的信息。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"serviceworker": &#123;</span><br><span class="line">  "src": "sw.js",</span><br><span class="line">  "scope": "/foo",</span><br><span class="line">  "update_via_cache": "none"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>theme_color</strong> 应用程序上下文的默认主题颜色。</p><p><strong>related_applications</strong> 是底层应用程序平台可访问的应用程序。</p><p><strong>prefer_related_applications</strong> 表示相关应用程序是否应优先于当前的 Web 应用程序。</p><p><strong>background_color</strong> Web 应用程序的预期背景颜色。</p><p><strong>categories</strong> Web 应用程序所属的预期应用程序类别。</p><p><strong>screenshots</strong> 一个 ImageResources 数组，表示常见使用场景中的 Web 应用程序的截图。</p><p><strong>iarc_rating_id</strong> 用于确定 Web 应用程序适合的年龄。</p><p>一个完整的示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"lang"</span>: <span class="string">"en"</span>,</span><br><span class="line">  <span class="attr">"dir"</span>: <span class="string">"ltr"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Super Racer 3000"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"The ultimate futuristic racing game from the future!"</span>,</span><br><span class="line">  <span class="attr">"short_name"</span>: <span class="string">"Racer3K"</span>,</span><br><span class="line">  <span class="attr">"icons"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"icon/lowres.webp"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"64x64"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/webp"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"icon/lowres.png"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"64x64"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"icon/hd_hi"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"128x128"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"scope"</span>: <span class="string">"/racer/"</span>,</span><br><span class="line">  <span class="attr">"start_url"</span>: <span class="string">"/racer/start.html"</span>,</span><br><span class="line">  <span class="attr">"display"</span>: <span class="string">"fullscreen"</span>,</span><br><span class="line">  <span class="attr">"orientation"</span>: <span class="string">"landscape"</span>,</span><br><span class="line">  <span class="attr">"theme_color"</span>: <span class="string">"aliceblue"</span>,</span><br><span class="line">  <span class="attr">"background_color"</span>: <span class="string">"red"</span>,</span><br><span class="line">  <span class="attr">"serviceworker"</span>: &#123;</span><br><span class="line">    <span class="attr">"src"</span>: <span class="string">"sw.js"</span>,</span><br><span class="line">    <span class="attr">"scope"</span>: <span class="string">"/racer/"</span>,</span><br><span class="line">    <span class="attr">"update_via_cache"</span>: <span class="string">"none"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"screenshots"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"screenshots/in-game-1x.jpg"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"640x480"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/jpeg"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"src"</span>: <span class="string">"screenshots/in-game-2x.jpg"</span>,</span><br><span class="line">      <span class="attr">"sizes"</span>: <span class="string">"1280x920"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"image/jpeg"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要在页面是使用的话直接用 <link> 标签引用即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"manifest"</span> <span class="attr">href</span>=<span class="string">"/manifest.json"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这样浏览器就可以安装你的 Web 应用了。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>让 Hugo 博客支持 PWA</title>
      <link href="/post/2019/07/23/add-pwa-support-to-hugo/"/>
      <url>/post/2019/07/23/add-pwa-support-to-hugo/</url>
      
        <content type="html"><![CDATA[<p>让用 Hugo 搭建的博客支持 PWA 很简单，只需 2 个步骤即可</p><a id="more"></a><p>让用 Hugo 搭建的博客支持 PWA 很简单，只需 2 个步骤即可：</p><h2 id="添加一个-manifest-json-文件"><a href="#添加一个-manifest-json-文件" class="headerlink" title="添加一个 manifest.json 文件"></a>添加一个 manifest.json 文件</h2><p>使用 <a href="https://app-manifest.firebaseapp.com" target="_blank" rel="noopener">https://app-manifest.firebaseapp.com</a> 来生成博客的 manifest.json 文件，然后将生成出来的文件和图片放到博客的 static 目录，然后在 layout/index.html 的 <head><meta name="generator" content="Hexo 3.9.0"> 标签内引用这个文件</head></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"manifest"</span> <span class="attr">href</span>=<span class="string">"/manifest.json"</span> /&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样你的博客就可以安装到桌面了</p><h2 id="使用-Workbox-工具注册-ServiceWorker"><a href="#使用-Workbox-工具注册-ServiceWorker" class="headerlink" title="使用 Workbox 工具注册 ServiceWorker"></a>使用 Workbox 工具注册 ServiceWorker</h2><p>在 static 新建一个 <code>sw.js</code> 文件，在文件添加以下内容用来为网络请求添加缓存；主要是缓存静态资源 js，css，图片以及字体等文件，<br>详细文档可以查看 <a href="https://developers.google.cn/web/tools/workbox" target="_blank" rel="noopener">Workbox 文档</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">importScripts(<span class="string">'https://cdn.jsdelivr.net/npm/workbox-cdn/workbox/workbox-sw.js'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (workbox) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Yay! Workbox is loaded 🎉`</span>)</span><br><span class="line"></span><br><span class="line">  workbox.routing.registerRoute(</span><br><span class="line">    /\.(?:js|css)$/,</span><br><span class="line">    <span class="keyword">new</span> workbox.strategies.StaleWhileRevalidate(&#123;</span><br><span class="line">      cacheName: <span class="string">'static-resources'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  workbox.routing.registerRoute(</span><br><span class="line">    /\.(?:png|jpg|jpeg|svg|gif)$/,</span><br><span class="line">    <span class="keyword">new</span> workbox.strategies.CacheFirst(&#123;</span><br><span class="line">      cacheName: <span class="string">'image-cache'</span>,</span><br><span class="line">      plugins: [</span><br><span class="line">        <span class="keyword">new</span> workbox.expiration.Plugin(&#123;</span><br><span class="line">          maxEntries: <span class="number">20</span>,</span><br><span class="line">          maxAgeSeconds: <span class="number">7</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span></span><br><span class="line">        &#125;)</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  workbox.routing.registerRoute(</span><br><span class="line">    /^https:\/\/fonts\.googleapis\.com/,</span><br><span class="line">    <span class="keyword">new</span> workbox.strategies.StaleWhileRevalidate(&#123;</span><br><span class="line">      cacheName: <span class="string">'google-fonts-stylesheets'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  workbox.routing.registerRoute(</span><br><span class="line">    /^https:\/\/fonts\.gstatic\.com/,</span><br><span class="line">    <span class="keyword">new</span> workbox.strategies.CacheFirst(&#123;</span><br><span class="line">      cacheName: <span class="string">'google-fonts-webfonts'</span>,</span><br><span class="line">      plugins: [</span><br><span class="line">        <span class="keyword">new</span> workbox.cacheableResponse.Plugin(&#123;</span><br><span class="line">          statuses: [<span class="number">0</span>, <span class="number">200</span>]</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> workbox.expiration.Plugin(&#123;</span><br><span class="line">          maxAgeSeconds: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">365</span>,</span><br><span class="line">          maxEntries: <span class="number">30</span></span><br><span class="line">        &#125;)</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Boo! Workbox didn't load 😬`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本完成了，可以用 Chrome 的 Audits 的工具跑了一下分，看看还有什么地方要修改的。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解 &lt;Link&gt; 标签上 Rel=prexxx 的作用</title>
      <link href="/post/2019/07/22/understand-link-prexxx/"/>
      <url>/post/2019/07/22/understand-link-prexxx/</url>
      
        <content type="html"><![CDATA[<p>在 HTML 中 <link> 标签指定了当前文档与外部资源之间的关系，本文说明 <link> 标签的 rel 属性分别设置 dns-prefetch，preconnect，prefetch，preload，prerender 的时候有说明作用</p><a id="more"></a><p>在 HTML 中 <link> 标签指定了当前文档与外部资源之间的关系<br>本文说明 <link> 标签的 rel 属性分别设置 dns-prefetch，preconnect，prefetch，preload，prerender 的时候有说明作用</p><p>dns-prefetch：向浏览器提示需要资源，允许浏览器在用户单击链接之前进行 DNS 查找和协议握手</p><p>preconnect：向浏览器提供提示，建议它提前打开与链接网站的连接，而不泄露任何私人信息或下载任何内容，以便在遵循链接时可以更快地获取链接的内容</p><p>prefetch：建议浏览器提前获取链接资源，因为它可能是用户请求的。 从 Firefox 44 开始，将考虑 crossorigin 属性的值，从而可以进行匿名预取</p><p>preload：告诉浏览器下载资源，因为稍后在当前导航期间将需要此资源</p><p>prerender：建议浏览器提前获取链接资源，并且它还在屏幕外渲染预取内容，以便在需要时可以快速呈现给用户</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://devdocs.io/html/link_types" target="_blank" rel="noopener">link_types</a></p><p><a href="https://stackoverflow.com/questions/47273743/preconnect-vs-dns-prefetch-resource-hints" target="_blank" rel="noopener">preconnect-vs-dns-prefetch-resource-hints</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器请求耗时阶段解释</title>
      <link href="/post/2019/07/18/request-timimg/"/>
      <url>/post/2019/07/18/request-timimg/</url>
      
        <content type="html"><![CDATA[<p>浏览器请求耗时阶段解释</p><a id="more"></a><h2 id="浏览器请求耗时阶段解释"><a href="#浏览器请求耗时阶段解释" class="headerlink" title="浏览器请求耗时阶段解释"></a>浏览器请求耗时阶段解释</h2><p><strong>Queueing</strong> 浏览器会在以下情况时将请求加入队列，有优先级更高的请求；当请求协议是 HTTP/1.0 和 HTTP/1.1 时，同一域名下已经有 6 个 TCP 链接；浏览器在分配磁盘缓存</p><p><strong>Stalled</strong> 由于排队中描述的任何原因，请求可能会停止</p><p><strong>DNS Lookup</strong> 浏览器正在解析请求的 IP 地址</p><p><strong>Proxy negotiation</strong> 浏览器与代理服务器协商请求</p><p><strong>Request sent</strong> 请求已经发出</p><p><strong>ServiceWorker Preparation</strong> 浏览器启动 service worker</p><p><strong>Request to ServiceWorker</strong> 请求已经向 service worker 发出</p><p><strong>Waiting (TTFB)</strong> 浏览器等待第一个字节返回，此时间包括 1 次往返延迟和服务器准备响应所用的时间。</p><p><strong>Content Download</strong>. 浏览器接收响应</p><p><strong>Receiving Push</strong>. 浏览器收到通过 HTTP/2 Server Push 的响应</p><p><strong>Reading Push</strong>. 浏览器正在读取先前收到的本地数据</p><h2 id="Timing-breakdown-phases-explained"><a href="#Timing-breakdown-phases-explained" class="headerlink" title="Timing breakdown phases explained"></a>Timing breakdown phases explained</h2><p>Here’s more information about each of the phases you may see in the Timing tab:</p><p><strong>Queueing</strong>. The browser queues requests when:</p><ul><li>There are higher priority requests.</li><li>There are already six TCP connections open for this origin, which is the limit. Applies to HTTP/1.0 and HTTP/1.1 only.</li><li>The browser is briefly allocating space in the disk cache</li></ul><p><strong>Stalled</strong>. The request could be stalled for any of the reasons described in<strong>Queueing</strong>.</p><p><strong>DNS Lookup</strong>. The browser is resolving the request’s IP address.</p><p><strong>Proxy negotiation</strong>. The browser is negotiating the request with a<a href="https://en.wikipedia.org/wiki/Proxy_server" target="_blank" rel="noopener">proxy server</a>.</p><p><strong>Request sent</strong>. The request is being sent.</p><p><strong>ServiceWorker Preparation</strong>. The browser is starting up the service worker.</p><p><strong>Request to ServiceWorker</strong>. The request is being sent to the service worker.</p><p><strong>Waiting (TTFB)</strong>. The browser is waiting for the first byte of a response. TTFB stands for Time To First Byte. This timing includes 1 round trip of latency and the time the server took to prepare the response.</p><p><strong>Content Download</strong>. The browser is receiving the response.</p><p><strong>Receiving Push</strong>. The browser is receiving data for this response via HTTP/2 Server Push.</p><p><strong>Reading Push</strong>. The browser is reading the local data previously received.</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Browser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dart 语言中的 Final 与 Const 的区别</title>
      <link href="/post/2019/07/16/dart-final-vs-const/"/>
      <url>/post/2019/07/16/dart-final-vs-const/</url>
      
        <content type="html"><![CDATA[<p>在 Dart 中有 <code>final</code> 和 <code>const</code> 两个关键字，貌似都是表示常量的，但是它们还是有区别的</p><a id="more"></a><p>在 Dart 中有 <code>final</code> 和 <code>const</code> 两个关键字，貌似都是表示常量的，但是它们还是有区别的</p><p>final 变量的值只能被设置一次； const 变量在编译时就已经固定 (const 变量是隐式 final 的类型.) 最高级 final 变量或类变量在第一次使用时被初始化。</p><p><a href="https://dart.dev/guides/language/language-tour#final-and-const" target="_blank" rel="noopener">官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Dart </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 Apple 的 Code Signing</title>
      <link href="/post/2019/07/15/code-signing/"/>
      <url>/post/2019/07/15/code-signing/</url>
      
        <content type="html"><![CDATA[<p>想要把 Flutter 写的应用运行在 iPhone 上，必须要进行 Code Signing</p><p><a href="https://developer.apple.com/support/code-signing/" target="_blank" rel="noopener">官方文档</a></p><h2 id="Code-Signing"><a href="#Code-Signing" class="headerlink" title="Code Signing"></a>Code Signing</h2><p>Code signing your app assures users that it is from a known source and the app hasn’t been modified since it was last signed. Before your app can integrate app services, be installed on a device, or be submitted to the App Store, it must be signed with a<a href="https://developer.apple.com/support/certificates/" target="_blank" rel="noopener">certificate</a>issued by Apple. For more information on how to request certificates and code sign your apps, review<a href="https://help.apple.com/xcode/mac/current/" target="_blank" rel="noopener">Xcode Help</a>.</p><h2 id="代码签名"><a href="#代码签名" class="headerlink" title="代码签名"></a>代码签名</h2><p>代码签名您的应用程序会向用户保证它来自已知来源，并且该应用程序自上次签名后未被修改。 在您的应用程序可以集成应用程序服务，安装在设备上或提交到 App Store 之前，必须使用 Apple 颁发的证书进行签名。</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
